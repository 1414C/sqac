<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PublicDB API on Sqac ORM</title>
    <link>https://1414c.github.io/sqac/public-db/</link>
    <description>Recent content in PublicDB API on Sqac ORM</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 13 Dec 2018 09:51:20 -0700</lastBuildDate>
    
	<atom:link href="https://1414c.github.io/sqac/public-db/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Getting a PublicDB Handle</title>
      <link>https://1414c.github.io/sqac/public-db/a-pdb-handle/</link>
      <pubDate>Fri, 07 Dec 2018 16:48:02 -0700</pubDate>
      
      <guid>https://1414c.github.io/sqac/public-db/a-pdb-handle/</guid>
      <description>Before using the sqac API, a connection must be established to the target database. The main interface used by sqac is called PublicDB and we will call this the so-called Handle variable in the sample code.
// Handle will be the central access-point to the ORM and should be made  // available in all locations where access to the persistent storage  // (database) is required.  var ( Handle sqac.</description>
    </item>
    
    <item>
      <title>CreateTables</title>
      <link>https://1414c.github.io/sqac/public-db/b-pdb-create-tables/</link>
      <pubDate>Fri, 07 Dec 2018 15:48:02 -0700</pubDate>
      
      <guid>https://1414c.github.io/sqac/public-db/b-pdb-create-tables/</guid>
      <description>The CreateTables method is used to create one or more tables in the target database. CreateTables accepts one or more go struct definitions that have been annotated with &amp;ldquo;sqac:&amp;rdquo; tags and uses the provided information to create new tables in the database.
Errors encountered during table creation are returned to the caller immediately. This may result in the incomplete processing of the tables contained in parameter i &amp;hellip;interface{}. CreateTables Example // Declare a struct to be used as the source for table creation.</description>
    </item>
    
    <item>
      <title>DropTables</title>
      <link>https://1414c.github.io/sqac/public-db/c-pdb-drop-tables/</link>
      <pubDate>Fri, 07 Dec 2018 18:06:32 -0700</pubDate>
      
      <guid>https://1414c.github.io/sqac/public-db/c-pdb-drop-tables/</guid>
      <description>The DropTables method is used to drop one or more tables in the target database. DropTables accepts one or more go struct definitions that have been annotated with &amp;ldquo;sqac:&amp;rdquo; tags and uses the provided information to drop tables in the database. Note that the DropTables method will not attempt to drop a table that does not exist in the target database. In such a case, no error is reported as the database is already in the desired state.</description>
    </item>
    
    <item>
      <title>AlterTables</title>
      <link>https://1414c.github.io/sqac/public-db/d-pdb-alter-tables/</link>
      <pubDate>Fri, 07 Dec 2018 18:14:27 -0700</pubDate>
      
      <guid>https://1414c.github.io/sqac/public-db/d-pdb-alter-tables/</guid>
      <description>The AlterTables method can be used to introduce additive changes to existing tables, or create new tables if the tables contained in the variadic parameter list are not present in the database. Permissible table changes include:
 adding one or more columns addition of simple or compound indices addition of foreign-key relationships, as long as the existing data permits it  Inadmissible table changes include:
 changing the type of an existing column changing the name of an existing column updating the properties of an existing column (nullable/default) deleting an existing column deleting an index deleting an existing foreign-key relationship  To deal with inadmissible changes, it is best to call DropTables followed by CreateTables, or call the DestructiveResetTables method.</description>
    </item>
    
    <item>
      <title>DestructiveResetTables</title>
      <link>https://1414c.github.io/sqac/public-db/e-pdb-destructive-reset-tables/</link>
      <pubDate>Sat, 08 Dec 2018 09:16:22 -0700</pubDate>
      
      <guid>https://1414c.github.io/sqac/public-db/e-pdb-destructive-reset-tables/</guid>
      <description>The DestructiveResetTables method is used to drop and recreate one or more tables in the target database. DestructiveResetTables accepts one or more go struct definitions that have been annotated with &amp;ldquo;sqac:&amp;rdquo; tags and uses the provided information to drop and recreate the tables in the database. Note that the DestructiveResetTables method will not attempt to drop a table that does not exist in the target database. It follows that the data in the existing table will be lost unless backed up prior to the call to the DestructiveResetTables method.</description>
    </item>
    
    <item>
      <title>ExistsTable</title>
      <link>https://1414c.github.io/sqac/public-db/f-pdb-exists-table/</link>
      <pubDate>Sun, 09 Dec 2018 08:59:42 -0700</pubDate>
      
      <guid>https://1414c.github.io/sqac/public-db/f-pdb-exists-table/</guid>
      <description>The ExistsTable method is used to check whether a table exists in the target database. ExistsTable accepts a single string argument containing the name of the table to be checked in the database. If the table is found, a &amp;lsquo;true&amp;rsquo; value will be returned to the caller.
ExistsTable differs from the other *Tables methods in that it does not require the table&amp;rsquo;s go struct declaration to determine the table name. A string value is used, as this is the only information the method requires to carry out its task, and it is quite likely that the caller already knows the string name before the call is made.</description>
    </item>
    
    <item>
      <title>CreateIndex</title>
      <link>https://1414c.github.io/sqac/public-db/g-pdb-create-index/</link>
      <pubDate>Mon, 10 Dec 2018 09:22:31 -0700</pubDate>
      
      <guid>https://1414c.github.io/sqac/public-db/g-pdb-create-index/</guid>
      <description>CreateIndex creates the index contained in the incoming IndexInfo structure. Indexes are created as non-unique by default, and in compound index situations the fields (columns) will be added to the index in the order they are contained in the IndexInfo.[]IndexFields slice.
Care should be taken when providing an index name, as the value of input variable &amp;lsquo;in&amp;rsquo; is used verbatim when the index is created in the database. The suggested format for index naming is as follows:</description>
    </item>
    
    <item>
      <title>DropIndex</title>
      <link>https://1414c.github.io/sqac/public-db/h-pdb-drop-index/</link>
      <pubDate>Mon, 10 Dec 2018 09:55:12 -0700</pubDate>
      
      <guid>https://1414c.github.io/sqac/public-db/h-pdb-drop-index/</guid>
      <description>DropIndex drops named index &amp;ldquo;in&amp;rdquo; on database table &amp;ldquo;tn&amp;rdquo;. The method performs a check for the existence of the specified index prior to initiating the drop request to the database. In the event that the specified index does not exist, no error is returned as the database is deemed to be in the correct state.
When using DropIndex it is important to consider whether the table&amp;rsquo;s source model (go struct annotated with &amp;lsquo;sqac:&amp;rsquo; tags) contains the index declaration.</description>
    </item>
    
    <item>
      <title>ExistsIndex</title>
      <link>https://1414c.github.io/sqac/public-db/i-pdb-exists-index/</link>
      <pubDate>Mon, 10 Dec 2018 10:23:14 -0700</pubDate>
      
      <guid>https://1414c.github.io/sqac/public-db/i-pdb-exists-index/</guid>
      <description>ExistsIndex checks for the existence of named index &amp;ldquo;in&amp;rdquo; on database table &amp;ldquo;tn&amp;rdquo;. The method returns true if the specified index exists and false if it does not.
This method is used internally in PublicDB.DropIndex and does not need to be called prior to dropping a database index.
ExistsIndex Example The following structure &amp;lsquo;Depot&amp;rsquo; has been used to create table &amp;ldquo;depot&amp;rdquo; in the target database with index &amp;ldquo;idx_depot_region_county&amp;rdquo;. We will check for the existence of &amp;ldquo;idx_depot_region_county&amp;rdquo; expecting a true result, then check for the existence of index &amp;ldquo;idx_depot_province_region&amp;rdquo; expecting a false result.</description>
    </item>
    
    <item>
      <title>Create</title>
      <link>https://1414c.github.io/sqac/public-db/j-pdb-create/</link>
      <pubDate>Mon, 10 Dec 2018 15:20:15 -0700</pubDate>
      
      <guid>https://1414c.github.io/sqac/public-db/j-pdb-create/</guid>
      <description>The Create method is part of sqac&amp;rsquo;s CRUD API and is used to insert a single-row of the specified entity into it&amp;rsquo;s related database table. Structs annotated with &amp;lsquo;sqac:&amp;rsquo; tags are colloquially known as sqac entities, hence the parameter name &amp;lsquo;ent&amp;rsquo;.
The ent parameter must be a pointer to a populated go struct of the sqac table declaration. If an error is encountered, it will be returned to the caller.</description>
    </item>
    
    <item>
      <title>Update</title>
      <link>https://1414c.github.io/sqac/public-db/k-pdb-update/</link>
      <pubDate>Mon, 10 Dec 2018 15:38:16 -0700</pubDate>
      
      <guid>https://1414c.github.io/sqac/public-db/k-pdb-update/</guid>
      <description>The Update method is part of sqac&amp;rsquo;s CRUD API and is used to update an existing row of the specified entity into it&amp;rsquo;s related database table. Structs annotated with &amp;lsquo;sqac:&amp;rsquo; tags are colloquially known as sqac entities, hence the parameter name &amp;lsquo;ent&amp;rsquo;.
The ent parameter must be a pointer to a populated go struct of the sqac table declaration. If the table contains a primary-key in the database, the key column(s) may not be updated, but must be included.</description>
    </item>
    
    <item>
      <title>Delete</title>
      <link>https://1414c.github.io/sqac/public-db/l-pdb-delete/</link>
      <pubDate>Mon, 10 Dec 2018 16:41:17 -0700</pubDate>
      
      <guid>https://1414c.github.io/sqac/public-db/l-pdb-delete/</guid>
      <description>The Delete method is part of sqac&amp;rsquo;s CRUD API and is used to Delete an existing row of the specified entity from it&amp;rsquo;s related database table. Structs annotated with &amp;lsquo;sqac:&amp;rsquo; tags are colloquially known as sqac entities, hence the parameter name &amp;lsquo;ent&amp;rsquo;.
The ent parameter must be a pointer to a populated go struct of the sqac table declaration. If the table contains a primary-key in the database, the key column(s) should be completely populated.</description>
    </item>
    
    <item>
      <title>GetEntity</title>
      <link>https://1414c.github.io/sqac/public-db/m-pdb-get-entity/</link>
      <pubDate>Mon, 10 Dec 2018 16:50:18 -0700</pubDate>
      
      <guid>https://1414c.github.io/sqac/public-db/m-pdb-get-entity/</guid>
      <description>The GetEntity method is part of sqac&amp;rsquo;s CRUD API and is used to retrieve an existing row of the specified entity from it&amp;rsquo;s related database table. Structs annotated with &amp;lsquo;sqac:&amp;rsquo; tags are colloquially known as sqac entities, hence the parameter name &amp;lsquo;ent&amp;rsquo;.
The ent parameter must be a pointer to a go struct of the sqac table declaration in which the primary-key fields have been populated. The GetEntity method can be thought of as a fully-keyed SELECT SINGLE statement.</description>
    </item>
    
    <item>
      <title>GetEntitiesCP</title>
      <link>https://1414c.github.io/sqac/public-db/n-pdb-get-entities-with-commands-ip/</link>
      <pubDate>Mon, 10 Dec 2018 17:00:19 -0700</pubDate>
      
      <guid>https://1414c.github.io/sqac/public-db/n-pdb-get-entities-with-commands-ip/</guid>
      <description>The GetEntitiesCP method is part of sqac&amp;rsquo;s CRUD API and is used to retrieve existing rows of the specified entity from their related database table. Structs annotated with &amp;lsquo;sqac:&amp;rsquo; tags are colloquially known as sqac entities, hence the parameter name &amp;lsquo;ents&amp;rsquo;.
The ents parameter must be a pointer to a slice declared using the go struct-type corresponding to the targeted database table. This method can be thought of as a flexible retrieval mechanism for one or more database records.</description>
    </item>
    
    <item>
      <title>CreateForeignKey</title>
      <link>https://1414c.github.io/sqac/public-db/o-pdb-create-foreign-key/</link>
      <pubDate>Wed, 12 Dec 2018 17:19:17 -0700</pubDate>
      
      <guid>https://1414c.github.io/sqac/public-db/o-pdb-create-foreign-key/</guid>
      <description>The CreateForeignKey method facilitates the creation of a foreign-key on a table column in the database. A foreign-key constraint is created on the assigned column, thereby limiting its allowable values to those found in the table.column referenced in the foreign-key declaration.
In general, it is more desirable to declare foreign-keys in the model via the &amp;ldquo;fkey:&amp;rdquo; &amp;lsquo;sqac:&amp;rsquo; tag than to call this method directly.
Parameters    Parameter Description     i interface{} Accepts the go struct type of the table on which the foreign-key is being declared.</description>
    </item>
    
    <item>
      <title>DropForeignKey</title>
      <link>https://1414c.github.io/sqac/public-db/p-pdb-drop-foreign-key/</link>
      <pubDate>Thu, 13 Dec 2018 08:51:18 -0700</pubDate>
      
      <guid>https://1414c.github.io/sqac/public-db/p-pdb-drop-foreign-key/</guid>
      <description>The DropForeignKey method facilitates the dropping of an existing foreign-key constraint in the database.
Parameters    Parameter Description     i interface{} Accepts the go struct type of the table from which the foreign-key is being dropped. For example:If table column product.warehouse_id had a foreign-key constraint against table column warehouse.id, this parameter should be provided with go type Product{}.   ft string The database table name of the table on which the foreign-key is being dropped.</description>
    </item>
    
    <item>
      <title>ExistsForeignKeyByName</title>
      <link>https://1414c.github.io/sqac/public-db/q-pdb-exists-foreign-key-by-name/</link>
      <pubDate>Thu, 13 Dec 2018 09:33:19 -0700</pubDate>
      
      <guid>https://1414c.github.io/sqac/public-db/q-pdb-exists-foreign-key-by-name/</guid>
      <description>PublicDB.ExistsForeignKeyByName(i interface{}, fkn string) (bool, error) The ExistsForeignKeyByName method checks for the existence of the specified foreign-key constraint in the database.
The following go structs contain &amp;lsquo;sqac:&amp;rsquo; tags declaring a foreign-key constraint between table column product.warehouse_id and table column warehouse.id. The resulting foreign-key constraint on table column product.warehouse_id would be named &amp;ldquo;fk_product_warehouse_id&amp;rdquo; based on the sqac foreign-key naming standard.
type Warehouse struct { ID uint64 `db:&amp;#34;id&amp;#34; json:&amp;#34;id&amp;#34; sqac:&amp;#34;primary_key:inc;start:40000000&amp;#34;` City string `db:&amp;#34;city&amp;#34; json:&amp;#34;city&amp;#34; sqac:&amp;#34;nullable:false;default:Calgary&amp;#34;` Quadrant string `db:&amp;#34;quadrant&amp;#34; json:&amp;#34;quadrant&amp;#34; sqac:&amp;#34;nullable:false;default:SE&amp;#34;` } type Product struct { ID uint64 `db:&amp;#34;id&amp;#34; json:&amp;#34;id&amp;#34; sqac:&amp;#34;primary_key:inc;start:95000000&amp;#34;` ProductName string `db:&amp;#34;product_name&amp;#34; json:&amp;#34;product_name&amp;#34; sqac:&amp;#34;nullable:false;default:unknown&amp;#34;` ProductCode string `db:&amp;#34;product_code&amp;#34; json:&amp;#34;product_code&amp;#34; sqac:&amp;#34;nullable:false;default:0000-0000-00&amp;#34;` UOM string `db:&amp;#34;uom&amp;#34; json:&amp;#34;uom&amp;#34; sqac:&amp;#34;nullable:false;default:EA&amp;#34;` // foreign-key declared against table &amp;#34;warehouse&amp;#34;, column &amp;#34;id&amp;#34;  WarehouseID uint64 `db:&amp;#34;warehouse_id&amp;#34; json:&amp;#34;warehouse_id&amp;#34; sqac:&amp;#34;nullable:false;fkey:warehouse(id)&amp;#34;` } Parameters    Parameter Description     i interface{} Accepts the go struct type of the table from which the foreign-key is thought to be declared.</description>
    </item>
    
    <item>
      <title>ExistsForeignKeyByFields</title>
      <link>https://1414c.github.io/sqac/public-db/r-pdb-exists-foreign-key-by-fields/</link>
      <pubDate>Thu, 13 Dec 2018 09:51:20 -0700</pubDate>
      
      <guid>https://1414c.github.io/sqac/public-db/r-pdb-exists-foreign-key-by-fields/</guid>
      <description>PublicDB.ExistsForeignKeyByFields(i interface{}, ft, rt, ff, rf string) (bool, error) The ExistsForeignKeyByName method checks for the existence of the specified foreign-key constraint in the database.
The following go structs contain &amp;lsquo;sqac:&amp;rsquo; tags declaring a foreign-key constraint between table column product.warehouse_id and table column warehouse.id. The resulting foreign-key constraint on table column product.warehouse_id would be named &amp;ldquo;fk_product_warehouse_id&amp;rdquo; based on the sqac foreign-key naming standard.
type Warehouse struct { ID uint64 `db:&amp;#34;id&amp;#34; json:&amp;#34;id&amp;#34; sqac:&amp;#34;primary_key:inc;start:40000000&amp;#34;` City string `db:&amp;#34;city&amp;#34; json:&amp;#34;city&amp;#34; sqac:&amp;#34;nullable:false;default:Calgary&amp;#34;` Quadrant string `db:&amp;#34;quadrant&amp;#34; json:&amp;#34;quadrant&amp;#34; sqac:&amp;#34;nullable:false;default:SE&amp;#34;` } type Product struct { ID uint64 `db:&amp;#34;id&amp;#34; json:&amp;#34;id&amp;#34; sqac:&amp;#34;primary_key:inc;start:95000000&amp;#34;` ProductName string `db:&amp;#34;product_name&amp;#34; json:&amp;#34;product_name&amp;#34; sqac:&amp;#34;nullable:false;default:unknown&amp;#34;` ProductCode string `db:&amp;#34;product_code&amp;#34; json:&amp;#34;product_code&amp;#34; sqac:&amp;#34;nullable:false;default:0000-0000-00&amp;#34;` UOM string `db:&amp;#34;uom&amp;#34; json:&amp;#34;uom&amp;#34; sqac:&amp;#34;nullable:false;default:EA&amp;#34;` // foreign-key declared against table &amp;#34;warehouse&amp;#34;, column &amp;#34;id&amp;#34;  WarehouseID uint64 `db:&amp;#34;warehouse_id&amp;#34; json:&amp;#34;warehouse_id&amp;#34; sqac:&amp;#34;nullable:false;fkey:warehouse(id)&amp;#34;` } Parameters    Parameter Description     i interface{} Accepts the go struct type of the table on which the foreign-key is thought to be declared.</description>
    </item>
    
    <item>
      <title>sqac Data Types</title>
      <link>https://1414c.github.io/sqac/public-db/z-pdb-data-types/</link>
      <pubDate>Sun, 09 Dec 2018 10:32:31 -0700</pubDate>
      
      <guid>https://1414c.github.io/sqac/public-db/z-pdb-data-types/</guid>
      <description>sqac.IndexInfo IndexInfo is used by sqac to provide information to the PublicDB.CreateIndex method regarding the table name, uniqueness and columns to be included in a new database index.
// IndexInfo contains index definitions as read from the sqac:&amp;#34;index&amp;#34; tags type IndexInfo struct { TableName string Unique bool IndexFields []string } sqac.GetParam GetParam defines a common structure for CRUD GET parameters and is used in the PublicDB.GetEntitiesCP method.
type GetParam struct { FieldName string // database column name  Operand string // operand for parameter (ie.</description>
    </item>
    
  </channel>
</rss>