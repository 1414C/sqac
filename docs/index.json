[
{
	"uri": "https://1414c.github.io/sqac/getting-started/",
	"title": "Getting Started",
	"tags": [],
	"description": "",
	"content": "Getting Started Initial Setup "
},
{
	"uri": "https://1414c.github.io/sqac/getting-started/gs-content-a/",
	"title": "Go Environment",
	"tags": [],
	"description": "",
	"content": "If you already have Go version 1.13.x or higher installed you should skip to the next section. If you need to get Go installed on your machine, keep reading.\nGo is easy to setup and can be installed from source or binary package, both which are available at golang.org. Sqac is presently built and tested using golang version 1.13.5, but it is fine to use the latest stable 1.x release.\n Go binary installation instructions Go build-from-source installation instructions  "
},
{
	"uri": "https://1414c.github.io/sqac/getting-started/gs-content-b/",
	"title": "Installing Sqac",
	"tags": [],
	"description": "",
	"content": "The easiest way to install sqac is to use go get on the command-line to pull the latest version from github, as shown below:\ngo get -u github.com/1414C/sqac The \u0026lsquo;go get\u0026rsquo; command will pull the sqac github repository into your $GOPATH/src/github.com folder, as well as any dependencies referenced by the sqac source code. The -u flag is included to instruct go get to check for and pull updates to sqac and it's dependencies. Sqac uses go modules and will pull the required versions its dependencies based on the content of the go.mod file.\nEnsure that you have also installed the drivers for the databases you plan to use. Supported drivers include:\n   Driver Name Driver Location     SAP Hana Database Driver github.com/SAP/go-hdb/driver   MSSQL Database Driver github.com/denisenkom/go-mssqldb   MySQL Database Driver github.com/go-sql-driver/mysql   PostgreSQL Database Driver github.com/lib/pq   SQLite3 Database Driver github.com/mattn/go-sqlite3       Verify the installation by running the included test suite against sqlite. Test execution will create a \u0026lsquo;testdb.sqlite\u0026rsquo; database file in the sqac directory. The tests are not entirely idempotent and the testdb.sqlite file will not be cleaned up. This is by design as the tests were used for debugging purposes during the development. It would be a simple matter to tidy this up.     go test -v -db sqlite If all goes well, you should see the following:\n2018/12/20 11:50:47 package sqac init is running === RUN TestGetDBDriverName --- PASS: TestGetDBDriverName (0.00s) === RUN TestGetDBName --- PASS: TestGetDBName (0.00s) === RUN TestExistsTableNegative --- PASS: TestExistsTableNegative (0.00s) === RUN TestCreateTableBasic --- PASS: TestCreateTableBasic (0.00s) === RUN TestDropTablesBasic --- PASS: TestDropTablesBasic (0.00s) === RUN TestCreateTableCompoundKey --- PASS: TestCreateTableCompoundKey (0.01s) === RUN TestCreateTableNonIncKey --- PASS: TestCreateTableNonIncKey (0.00s) === RUN TestCreateTableNoKey --- PASS: TestCreateTableNoKey (0.00s) === RUN TestCreateTableWithAlterSequence --- PASS: TestCreateTableWithAlterSequence (0.00s) === RUN TestCreateTablesWithInclude --- PASS: TestCreateTablesWithInclude (0.00s) === RUN TestCreateUniqueColumnConstraintFromModel --- PASS: TestCreateUniqueColumnConstraintFromModel (0.00s) === RUN TestExistsIndexNegative --- PASS: TestExistsIndexNegative (0.00s) === RUN TestCreateSingleUniqueIndexFromModel --- PASS: TestCreateSingleUniqueIndexFromModel (0.00s) === RUN TestCreateSingleNonUniqueIndexFromModel --- PASS: TestCreateSingleNonUniqueIndexFromModel (0.00s) === RUN TestCreateSimpleCompositeIndex --- PASS: TestCreateSimpleCompositeIndex (0.00s) === RUN TestExistsIndexPositive --- PASS: TestExistsIndexPositive (0.00s) === RUN TestDropIndex --- PASS: TestDropIndex (0.00s) === RUN TestCreateCompositeIndexFromModel --- PASS: TestCreateCompositeIndexFromModel (0.00s) === RUN TestExistsColumn --- PASS: TestExistsColumn (0.00s) === RUN TestAlterTables --- PASS: TestAlterTables (0.01s) === RUN TestDestructiveResetTables --- PASS: TestDestructiveResetTables (0.01s) === RUN TestQueryOps --- PASS: TestQueryOps (0.01s) === RUN TestNullableValues --- PASS: TestNullableValues (0.00s) === RUN TestNonPersistentColumn --- PASS: TestNonPersistentColumn (0.00s) === RUN TestTimeSimple --- PASS: TestTimeSimple (0.00s) === RUN TestCRUDCreate --- PASS: TestCRUDCreate (0.00s) === RUN TestCRUDUpdate --- PASS: TestCRUDUpdate (0.01s) === RUN TestCRUDDelete --- PASS: TestCRUDDelete (0.00s) === RUN TestCRUDGet --- PASS: TestCRUDGet (0.00s) === RUN TestCRUDGetEntities --- PASS: TestCRUDGetEntities (0.01s) === RUN TestCRUDGetEntities2 --- PASS: TestCRUDGetEntities2 (0.01s) === RUN TestCRUDGetEntities4 --- PASS: TestCRUDGetEntities4 (0.01s) === RUN TestNullString --- PASS: TestNullString (0.00s) === RUN TestNullInt --- PASS: TestNullInt (0.00s) === RUN TestNullUint --- PASS: TestNullUint (0.00s) === RUN TestNullFloat --- PASS: TestNullFloat (0.00s) === RUN TestNullBool --- PASS: TestNullBool (0.00s) === RUN TestCamelToSnake --- PASS: TestCamelToSnake (0.00s) === RUN TestCRUDGetEntitiesWithCommandsOpenSelect --- PASS: TestCRUDGetEntitiesWithCommandsOpenSelect (0.01s) === RUN TestCRUDGetEntitiesWithCommandsSelectUint --- PASS: TestCRUDGetEntitiesWithCommandsSelectUint (0.01s) === RUN TestCRUDGetEntitiesWithCommandsSelectString --- PASS: TestCRUDGetEntitiesWithCommandsSelectString (0.01s) === RUN TestCRUDGetEntitiesWithCommandsSelectCount --- PASS: TestCRUDGetEntitiesWithCommandsSelectCount (0.01s) === RUN TestCRUDGetEntitiesWithCommandsLimit --- PASS: TestCRUDGetEntitiesWithCommandsLimit (0.01s) === RUN TestCRUDGetEntitiesWithCommandsLimitDesc --- PASS: TestCRUDGetEntitiesWithCommandsLimitDesc (0.01s) === RUN TestCRUDGetEntitiesWithCommandsLimitAsc --- PASS: TestCRUDGetEntitiesWithCommandsLimitAsc (0.01s) === RUN TestCRUDGetEntitiesWithCommandsOffset --- PASS: TestCRUDGetEntitiesWithCommandsOffset (0.01s) === RUN TestCRUDGetEntitiesWithCommandsOffsetDesc --- PASS: TestCRUDGetEntitiesWithCommandsOffsetDesc (0.01s) === RUN TestCRUDGetEntitiesWithCommandsOffsetLimit --- PASS: TestCRUDGetEntitiesWithCommandsOffsetLimit (0.01s) === RUN TestCRUDGetEntitiesWithCommandsOffsetLimitDesc --- PASS: TestCRUDGetEntitiesWithCommandsOffsetLimitDesc (0.01s) === RUN TestCRUDGetEntitiesWithCommandsOrderBy --- PASS: TestCRUDGetEntitiesWithCommandsOrderBy (0.01s) === RUN TestCRUDGetEntitiesWithCommandsOrderByDesc --- PASS: TestCRUDGetEntitiesWithCommandsOrderByDesc (0.01s) === RUN TestCRUDGetEntitiesWithCommandsParamOrderBy --- PASS: TestCRUDGetEntitiesWithCommandsParamOrderBy (0.01s) === RUN TestCRUDGetEntitiesWithCommandsParamOrderByDesc --- PASS: TestCRUDGetEntitiesWithCommandsParamOrderByDesc (0.01s) === RUN TestCRUDGetEntitiesWithCommandsOrderByDescLimit --- PASS: TestCRUDGetEntitiesWithCommandsOrderByDescLimit (0.01s) === RUN TestCRUDGetEntitiesWithCommandsOrderByDescLimitOffset --- PASS: TestCRUDGetEntitiesWithCommandsOrderByDescLimitOffset (0.01s) === RUN TestCRUDGetEntitiesWithCommandsOrderByAscLimitOffset --- PASS: TestCRUDGetEntitiesWithCommandsOrderByAscLimitOffset (0.01s) === RUN TestCRUDGetEntitiesWithCommandsTestOffsetOrderByAscLimitOffset --- PASS: TestCRUDGetEntitiesWithCommandsTestOffsetOrderByAscLimitOffset (0.01s) === RUN TestForeignKeyCreate --- PASS: TestForeignKeyCreate (0.01s) === RUN TestForeignKeyDrop --- PASS: TestForeignKeyDrop (0.01s) === RUN TestGetForeignKeyName --- PASS: TestGetForeignKeyName (0.00s) === RUN TestExistsForeignKeyByName --- PASS: TestExistsForeignKeyByName (0.01s) === RUN TestExistsForeignKeyByFields --- PASS: TestExistsForeignKeyByFields (0.01s) === RUN TestForeignKeyCreateFromModel --- PASS: TestForeignKeyCreateFromModel (0.01s) === RUN TestForeignKeyCreateTwoFromModel --- PASS: TestForeignKeyCreateTwoFromModel (0.01s) === RUN TestForeignKeyCreateTwoDelOneFromModel --- PASS: TestForeignKeyCreateTwoDelOneFromModel (0.00s) === RUN TestForeignKeyDelFromModel --- PASS: TestForeignKeyDelFromModel (0.00s) === RUN TestForeignKeyCreateViaAlterTable --- PASS: TestForeignKeyCreateViaAlterTable (0.01s) === RUN TestCRUDGetEntitiesCPOpenSelect --- PASS: TestCRUDGetEntitiesCPOpenSelect (0.01s) === RUN TestCRUDGetEntitiesCPSelectUint --- PASS: TestCRUDGetEntitiesCPSelectUint (0.01s) === RUN TestCRUDGetEntitiesCPSelectString --- PASS: TestCRUDGetEntitiesCPSelectString (0.01s) === RUN TestCRUDGetEntitiesCPSelectMultiParam --- PASS: TestCRUDGetEntitiesCPSelectMultiParam (0.01s) === RUN TestCRUDGetEntitiesCPSelectCount --- PASS: TestCRUDGetEntitiesCPSelectCount (0.01s) === RUN TestCRUDGetEntitiesCPLimit --- PASS: TestCRUDGetEntitiesCPLimit (0.01s) === RUN TestCRUDGetEntitiesCPLimitDesc --- PASS: TestCRUDGetEntitiesCPLimitDesc (0.01s) === RUN TestCRUDGetEntitiesCPLimitAsc --- PASS: TestCRUDGetEntitiesCPLimitAsc (0.01s) === RUN TestCRUDGetEntitiesCPOffset --- PASS: TestCRUDGetEntitiesCPOffset (0.01s) === RUN TestCRUDGetEntitiesCPOffsetDesc --- PASS: TestCRUDGetEntitiesCPOffsetDesc (0.01s) === RUN TestCRUDGetEntitiesCPOffsetLimit --- PASS: TestCRUDGetEntitiesCPOffsetLimit (0.01s) === RUN TestCRUDGetEntitiesCPOffsetLimitDesc --- PASS: TestCRUDGetEntitiesCPOffsetLimitDesc (0.01s) === RUN TestCRUDGetEntitiesCPOrderBy --- PASS: TestCRUDGetEntitiesCPOrderBy (0.01s) === RUN TestCRUDGetEntitiesCPOrderByDesc --- PASS: TestCRUDGetEntitiesCPOrderByDesc (0.01s) === RUN TestCRUDGetEntitiesCPParamOrderBy --- PASS: TestCRUDGetEntitiesCPParamOrderBy (0.01s) === RUN TestCRUDGetEntitiesCPParamOrderByDesc --- PASS: TestCRUDGetEntitiesCPParamOrderByDesc (0.01s) === RUN TestCRUDGetEntitiesCPOrderByDescLimit --- PASS: TestCRUDGetEntitiesCPOrderByDescLimit (0.01s) === RUN TestCRUDGetEntitiesCPOrderByDescLimitOffset --- PASS: TestCRUDGetEntitiesCPOrderByDescLimitOffset (0.01s) === RUN TestCRUDGetEntitiesCPOrderByAscLimitOffset --- PASS: TestCRUDGetEntitiesCPOrderByAscLimitOffset (0.01s) === RUN TestCRUDGetEntitiesCPTestOffsetOrderByAscLimitOffset --- PASS: TestCRUDGetEntitiesCPTestOffsetOrderByAscLimitOffset (0.01s) PASS ok github.com/1414C/sqac\t0.724s If running against sqlite is not an option, the test suite may be run against any of the supported database systems. When running against a non-sqlite db, a connection string must be supplied via the cs flag. See the Connection Strings section for database-specific connection string formats. The following invocation of the test suite is targeting as PostgreSQL database via the -db postgres and corresponding -cs \u0026ldquo;connection_string\u0026rdquo; flags:\ngo test -v -db postgres -cs \u0026#34;host=127.0.0.1 user=my_uname dbname=my_dbname sslmode=disable password=my_passwd\u0026#34; "
},
{
	"uri": "https://1414c.github.io/sqac/getting-started/gs-content-c/",
	"title": "Using Sqac",
	"tags": [],
	"description": "",
	"content": "The following example illustrates the general usage of the sqac library.\npackage main import ( \u0026#34;flag\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;github.com/1414C/sqac\u0026#34; _ \u0026#34;github.com/SAP/go-hdb/driver\u0026#34; _ \u0026#34;github.com/denisenkom/go-mssqldb\u0026#34; _ \u0026#34;github.com/go-sql-driver/mysql\u0026#34; _ \u0026#34;github.com/lib/pq\u0026#34; _ \u0026#34;github.com/mattn/go-sqlite3\u0026#34; ) func main() { dbFlag := flag.String(\u0026#34;db\u0026#34;, \u0026#34;sqlite\u0026#34;, \u0026#34;db-type for connection\u0026#34;) csFlag := flag.String(\u0026#34;cs\u0026#34;, \u0026#34;testdb.sqlite\u0026#34;, \u0026#34;connection-string for the database\u0026#34;) logFlag := flag.Bool(\u0026#34;l\u0026#34;, false, \u0026#34;activate sqac detail logging to stdout\u0026#34;) dbLogFlag := flag.Bool(\u0026#34;dbl\u0026#34;, false, \u0026#34;activate DDL/DML logging to stdout)\u0026#34;) flag.Parse() // This will be the central access-point to the ORM and should be made  // available in all locations where access to the persistent storage  // (database) is required.  var ( Handle sqac.PublicDB ) // Declare a struct to be used as the source for table creation.  type Depot struct { DepotNum int `db:\u0026#34;depot_num\u0026#34; sqac:\u0026#34;primary_key:inc\u0026#34;` CreateDate time.Time `db:\u0026#34;create_date\u0026#34; sqac:\u0026#34;nullable:false;default:now();\u0026#34;` Region string `db:\u0026#34;region\u0026#34; sqac:\u0026#34;nullable:false;default:YYC\u0026#34;` Province string `db:\u0026#34;province\u0026#34; sqac:\u0026#34;nullable:false;default:AB\u0026#34;` Country string `db:\u0026#34;country\u0026#34; sqac:\u0026#34;nullable:false;default:CA\u0026#34;` Population int `db:\u0026#34;population\u0026#34; sqac:\u0026#34;nullable:false;default:0;index:non-unique\u0026#34;` } // Create a PublicDB instance. Check the sqac.Create function, as the return parameter contains  // not only an implementation of PublicDB targeting the db-type/db, but also a pointer  // facilitating access to the db via jmoiron\u0026#39;s sqlx package. This is useful if you wish  // to access the sql/sqlx APIs directly.  Handle = sqac.Create(*dbFlag, *logFlag, *dbLogFlag, *cs) // Execute a call to get the name of the db-driver being used. At this point, any method  // contained in the sqac.PublicDB interface may be called.  driverName := Handle.GetDBDriverName() fmt.Println(\u0026#34;driverName:\u0026#34;, driverName) // Create a new table in the database  err := Handle.CreateTables(Depot{}) if err != nil { t.Errorf(\u0026#34;%s\u0026#34;, err.Error()) } // Determine the table name as per the table creation logic  tn := common.GetTableName(Depot{}) // Expect that table depot exists  if !Handle.ExistsTable(tn) { t.Errorf(\u0026#34;table %s was not created\u0026#34;, tn) } // prepare data for insertion into the db-table  var newDepot = Depot{ // DepotNum: 1234, // not needed - autoinc primary key  // CreateDate: , // not needed - default:now()  Region: \u0026#34;YVR\u0026#34;, Province: \u0026#34;BC\u0026#34;, Country: \u0026#34;CA\u0026#34;, Population: 2500000, } // create a new record via the CRUD Create call  err = Handle.Create(\u0026amp;newDepot) if err != nil { t.Errorf(err.Error()) } // Drop the table  err = Handle.DropTables(Depot{}) if err != nil { t.Errorf(\u0026#34;table %s was not dropped\u0026#34;, tn) } // Close the connection.  Handle.Close() } Execute the sample program against a local sqlite database as follows. Note that the sample program makes no effort to validate the flag parameters.\ngo run -db sqlite -cs testdb.sqlite main.go Experiment by commenting out the the DropTables(Depot{}) call, and add code to test some simple CRUD type operations.\nUpdate an existing db record:\nnewDepot.Region = \u0026#34;YYC\u0026#34; // \u0026#34;YVR\u0026#34; -\u0026gt; \u0026#34;YYC\u0026#34; newDepot.Province = \u0026#34;AB\u0026#34; // \u0026#34;BC\u0026#34; -\u0026gt; \u0026#34;AB\u0026#34; newDepot.Population = 1000000 // 2500000 -\u0026gt; 1000000 err = Handle.Update(\u0026amp;newDepot) if err != nil { t.Errorf(err.Error()) } Read an existing db record:\n// create a struct to read into and populate the keys depotRead := Depot{ DepotNum: newDepot.DepotNum, } err = Handle.GetEntity(\u0026amp;depotRead) if err != nil { t.Errorf(\u0026#34;%s\u0026#34;, err.Error()) } if depotRead.Region != \u0026#34;YYC\u0026#34; || depotRead.Region != \u0026#34;YVR\u0026#34; { t.Errorf(\u0026#34;depotRead.Region error!\u0026#34;) } Delete an existing db record:\nerr = Handle.Delete(\u0026amp;newDepot) if err != nil { t.Errorf(\u0026#34;%s\u0026#34;, err.Error()) } "
},
{
	"uri": "https://1414c.github.io/sqac/getting-started/gs-content-e/",
	"title": "Database Connection Strings",
	"tags": [],
	"description": "",
	"content": "Sqac requires a connection string in order to connect to the target database. Each of the supported databases has their own distinct connection string syntax.\nSqac presently supports MSSQL, MySQL, PostgreSQL, Sqlite3 and the SAP Hana database. You will need to know the db user-name / password, as well as the address:port and name of the database. Sample connection strings are provided as a reference. MSSQL Connection String cs := \u0026#34;sqlserver://SA:my_passwd@localhost:1401?database=my_dbname\u0026#34; MySQL Connection String cs := \u0026#34;my_uname:my_passwd@tcp(192.168.1.10:3306)/my_dbname?charset=utf8\u0026amp;parseTime=True\u0026amp;loc=Local\u0026#34; PostgreSQL Connection String cs := \u0026#34;host=127.0.0.1 user=my_uname dbname=my_dbname sslmode=disable password=my_passwd\u0026#34; Sqlite3 Connection String cs := \u0026#34;my_db_file.sqlite\u0026#34; // or  cs = \u0026#34;my_db_file.db\u0026#34; SAP Hana Connection String cs := \u0026#34;hdb://my_uname:my_passwd@192.168.111.45:30015\u0026#34; "
},
{
	"uri": "https://1414c.github.io/sqac/modeling/",
	"title": "Sqac Modeling",
	"tags": [],
	"description": "",
	"content": "Modeling Modeling with Sqac "
},
{
	"uri": "https://1414c.github.io/sqac/modeling/md-content-a/",
	"title": "Sqac Tags",
	"tags": [],
	"description": "",
	"content": "Sqac Tag Overview Sqac table-declarations are informed by go structs with json-style struct-tags indicating column attributes. Two tags are used: \u0026lsquo;db:' and \u0026lsquo;sqac:'; the \u0026lsquo;db:' tag is used to declare the database column name. This is typically the snake_case conversion of the go struct field-name. The \u0026lsquo;sqac:' tag is used to declare column attributes.\nA list of the supported \u0026lsquo;sqac:\u0026rsquo; tag attributes follows:\n   sqac tag Description     \u0026ldquo;primary_key:\u0026quot; This tag is used to declare that the specified column should be used as a primary-key in the generated database table. There are a few variations in its use: \u0026ldquo;primary_key:inc\u0026rdquo; declares the primary-key as auto-incrementing from 0 in the database table schema: db:\u0026quot;depot_num\u0026quot; sqac:\u0026quot;primary_key:inc\u0026quot; **\u0026ldquo;primary_key:\u0026quot;** declares the primary-key as a non-auto-incrementing primary-key in the database schema: db:\u0026quot;depot_num\u0026quot; sqac:\u0026quot;primary_key:\u0026quot; **\u0026ldquo;primary_key:inc;start:90000000\u0026rdquo;** declares the primary-key as auto-incrementing starting from 900000000: db:\u0026quot;depot_num\u0026quot; sqac:\u0026quot;primary_key:inc;start:90000000\u0026quot; It is possible to assign the \u0026ldquo;primary_key:\u0026rdquo; tag to more than one column in a table's model declaration. The column containing the first occurrence of the tag (top-down) will be created as the actual primary-key in the database. The collection of column declarations containing the \u0026ldquo;primary_key:\u0026rdquo; tag will be used to create a unique index on the DB table. This is useful in cases where one is migrating data from a source system that has the concept of compound table keys. For example, the following model excerpt would result in the creation of \u0026ldquo;depot_num\u0026rdquo; as the table's primary-key as well as the creation of a unique index containing \u0026ldquo;depot_num\u0026rdquo;, \u0026ldquo;depot_bay\u0026rdquo;, \u0026ldquo;create_date\u0026rdquo;: DepotNum int db:\u0026quot;depot_num\u0026quot; sqac:\u0026quot;primary_key:inc;start:90000000\u0026quot;DepotBay int db:\u0026quot;depot_bay\u0026quot; sqac:\u0026quot;primary_key:\u0026quot; CreateDate time.Time db:\u0026quot;create_date\u0026quot; sqac:\u0026quot;nullable:false;default:now();index:unique\u0026quot;**Notes:** auto-incrementing primary-keys increment by 1 and must always be declared as go-type **int**.   \u0026ldquo;nullable:\u0026quot; This tag is used to declare that the specified column is nullable in the database. Allowed values are true or false. db:\u0026quot;region\u0026quot; sqac:\u0026quot;nullable:false\u0026quot; or db:\u0026quot;region\u0026quot; sqac:\u0026quot;nullable:true\u0026quot; Notes: If this tag is not specified, the column is declared as nullable with the exception of columns declared with the \u0026ldquo;primary_key:\u0026rdquo; tag.   \u0026ldquo;default: The \u0026ldquo;default:\u0026rdquo; tag is used to declare a default value for the column in the database table schema. Default values are used as per the implementation of the SQL DEFAULT keyword in the target DBMS. db:\u0026quot;region\u0026quot; sqac:\u0026quot;nullable:false;default:YYC\u0026quot; Notes: This tag supports the use of static values for all column-types, as well as a small set of date-time functions: \u0026ldquo;default:now()\u0026rdquo; / \u0026ldquo;default:make_timestamptz(9999, 12, 31, 23, 59, 59.9)\u0026rdquo; / \u0026ldquo;default:eot()\u0026rdquo;   \u0026ldquo;index:\u0026quot; Single column indexes can be declared via the \u0026ldquo;index:\u0026rdquo; tag. The example index declarations require only the \u0026ldquo;index:unique / non-unique\u0026rdquo; pair in the column's sqac-tag. The following column declaration results in the creation of a unique index on table column \u0026ldquo;create_date\u0026rdquo;: db:\u0026quot;create_date\u0026quot; sqac:\u0026quot;nullable:false;default:now();index:unique\u0026quot; A non-unique single column index for the same column is declared as follows: db:\u0026quot;create_date\u0026quot; sqac:\u0026quot;nullable:false;default:now();index:non-unique\u0026quot; Multi-column indexes can also be declared via the index tag. The following example illustrates the declaration of a non-unique two-column index containing columns \u0026ldquo;new_column1\u0026rdquo; and \u0026ldquo;new_column2\u0026rdquo;: db:\u0026quot;new_column1\u0026quot; sqac:\u0026quot;nullable:false;index:idx_depot_new_column1_new_column2\u0026quot; db:\u0026quot;new_column2\u0026quot; sqac:\u0026quot;nullable:false;default:0;index:idx_depot_new_column1_new_column2\u0026quot;    \u0026ldquo;fkey:\u0026quot; Foreign-keys can be declared between table columns. The following example results in the creation of a foreign-key between the table's \u0026ldquo;warehouse_id\u0026rdquo; column and reference column \u0026ldquo;id\u0026rdquo; in table \u0026ldquo;warehouse\u0026rdquo;. WarehouseID uint64 db:\u0026quot;warehouse_id\u0026quot; json:\u0026quot;warehouse_id\u0026quot; sqac:\u0026quot;nullable:false;fkey:warehouse(id)\u0026quot; This example is not very clear - see the full example code excerpt in the Table Declaration Examples section.   \u0026quot;-\u0026quot; There are scenarios where model columns may not be persisted in the database. If a column is to be determined at runtime by the consuming application (for example), the following syntax may be used: NonPersistentColumn string db:\u0026quot;non_persistent_column\u0026quot; sqac:\u0026quot;-\u0026quot;        "
},
{
	"uri": "https://1414c.github.io/sqac/modeling/md-content-b/",
	"title": "primary_key:",
	"tags": [],
	"description": "",
	"content": "\u0026ldquo;primary_key:\u0026rdquo; Overview Sqac annotated go structs are used to supply the sqac runtime with the information required to create and alter tables in the database. The following examples illustrate the use of the \u0026lsquo;sqac:\u0026rsquo; tags described in the Sqac Tag Overview section of this document.\n\u0026ldquo;primary_key:\u0026rdquo; example The following example illustrates the use of \u0026lsquo;sqac:\u0026rsquo; tag \u0026ldquo;primary_key:\u0026rdquo; to declare a non-auto-incrementing table primary-key. Sqac expects table primary-keys to be declared as ints. In such a declaration, the caller must be careful to provide an unused value for the primary-key column.\n// Declare a struct to be used as the source for table creation.  type Depot struct { DepotNum int `db:\u0026#34;depot_num\u0026#34; sqac:\u0026#34;primary_key:\u0026#34;` ... ... } \u0026ldquo;primary_key:inc\u0026rdquo; example The following example illustrates the use of \u0026lsquo;sqac:\u0026rsquo; tag \u0026ldquo;primary_key:inc\u0026rdquo; to declare a table primary-key that auto-increments from 0. Most databases only support the use of an auto-incrementing sequence on a single column within a table declaration. Sqac expects columns setup with the auto-incrementing \u0026ldquo;primary_key:\u0026rdquo; to be declared as ints.\n// Declare a struct to be used as the source for table creation.  type Depot struct { DepotNum int `db:\u0026#34;depot_num\u0026#34; sqac:\u0026#34;primary_key:inc\u0026#34;` ... ... } \u0026ldquo;primary_key:inc;start:\u0026lt;int_value\u0026gt;\u0026rdquo; example The following example illustrates the use of \u0026lsquo;sqac:\u0026rsquo; tag \u0026ldquo;primary_key:\u0026rdquo; to declare a table primary-key that auto-increments from a starting value of 1000000. Sqac expects table primary-keys to be declared as ints.\n// Declare a struct to be used as the source for table creation.  type Depot struct { DepotNum int `db:\u0026#34;depot_num\u0026#34; sqac:\u0026#34;primary_key:inc;start:1000000\u0026#34;` ... ... } Compound \u0026ldquo;primary_key:\u0026rdquo; example In cases where a single-key is not sufficient to differentiate between records, the \u0026ldquo;primary_key:\u0026rdquo; tag may be applied to multiple columns in a table declaration. So doing will result in the creation of a database constraint or compound primary-key containing the chosen columns depending on the database being targeted.\nA similar effect can be obtained via declaration of a unique index containing the desired columns, or the use of the \u0026ldquo;constraint:\u0026rdquo; \u0026lsquo;sqac:\u0026rsquo; tag. When declaring a compound key/constraint the data-types may be of any type with the exception of the auto-incrementing column (if any).\nThe following example illustrates the creation of a two-field compound key:\ntype Depot struct { DepotNum int `db:\u0026#34;depot_num\u0026#34; sqac:\u0026#34;primary_key:\u0026#34;` DepotBay int `db:\u0026#34;depoy_bay\u0026#34; sqac:\u0026#34;primary_key:\u0026#34;` ... ... As declared, the two-field compound key creates the following in each of the supported DB systems:\n   DBMS Result     Sqlite3 CREATE TABLE IF NOT EXISTS depot (depot_num integer PRIMARY KEY AUTOINCREMENT,depot_bay integer,\u0026hellip; \u0026hellip; UNIQUE (depot_num, depot_bay) );   MySQL CREATE TABLE \u0026lsquo;depot\u0026rsquo; (\u0026lsquo;depot_num\u0026rsquo; int(11) NOT NULL AUTO_INCREMENT,\u0026lsquo;depot_bay\u0026rsquo; int(11) NOT NULL,**\u0026hellip;** **\u0026hellip;** PRIMARY KEY (\u0026lsquo;depot_num\u0026rsquo;, \u0026lsquo;depot_bay\u0026rsquo;) ) ENGINE = InnoDB AUTO_INCREMENT = 3 DEFAULT CHARSET = latin1   MSSQL CREATE TABLE [dbo].[depot]([depot_num] [int] IDENTITY(1,1) NOT NULL, [depot_bay] [int] NOT NULL, **\u0026hellip;** **\u0026hellip;** ) ON [PRIMARY] GO ALTER TABLE [dbo].[depot] ADD PRIMARY KEY CLUSTERED ( [depot_num] ASC, [depot_bay] ASC )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY] **\u0026hellip;** **\u0026hellip;**    PostgreSQL CREATE TABLE public.depot(depot_num integer NOT NULL DEFAULT nextval(\u0026lsquo;depot_depot_num_seq\u0026rsquo;::regclass),depot_bay integer NOT NULL,**\u0026hellip;** **\u0026hellip;** CONSTRAINT depot_pkey PRIMARY KEY (depot_num, depot_bay))**\u0026hellip;** **\u0026hellip;** ;   SAP Hana     "
},
{
	"uri": "https://1414c.github.io/sqac/modeling/md-content-c/",
	"title": "nullable:",
	"tags": [],
	"description": "",
	"content": "\u0026ldquo;nullable:\u0026rdquo; Overview Sqac annotated go structs are used to supply the sqac runtime with the information required to create and alter tables in the database. The following examples illustrate the use of the \u0026ldquo;nullable:\u0026rdquo; \u0026lsquo;sqac:\u0026rsquo; tag described in the Sqac Tag Overview section of this document.\nUnless specified, most databases will create columns as nullable by default. Use the \u0026ldquo;nullable:\u0026rdquo; tag to explicitly declare the data requirements of fields in the source go-struct and the nullability of the corresponding columns in the database.\n\u0026ldquo;nullable:false\u0026rdquo; example The following example illustrates the use of \u0026lsquo;sqac:\u0026rsquo; tag \u0026ldquo;nullable:false\u0026rdquo; to declare a column as not null in the database. If no value can be provided for a column deemed to be not nullable, consider setting a default value at the database level via the \u0026ldquo;default:\u0026rdquo; \u0026lsquo;sqac:\u0026rsquo; tag, or provide the go zero-value for the field.\n// Declare a struct to be used as the source for table creation.  // db column \u0026#34;region\u0026#34; will be created as NOT NULL  type Depot struct { ... Region string `db:\u0026#34;region\u0026#34; sqac:\u0026#34;nullable:false\u0026#34;` ... ... } \u0026ldquo;nullable:true\u0026rdquo; example The following example illustrates the use of \u0026lsquo;sqac:\u0026rsquo; tag \u0026ldquo;nullable:true\u0026rdquo; to declare a column as nullable in the database. Care should be taken when deciding to create a column as nullable, as the consumer may not be expecting null values in the selected data. Note that reading a null value into a non-pointer field in the go-struct will result in an error. In the following example code the \u0026ldquo;Region\u0026rdquo; field has been declared as a pointer to a string (*string) rather than a string for this reason.\n// Declare a struct to be used as the source for table creation.  // db column \u0026#34;region\u0026#34; will be nullable in the database  type Depot struct { ... Region *string `db:\u0026#34;region\u0026#34; sqac:\u0026#34;nullable:true\u0026#34;` ... ... } "
},
{
	"uri": "https://1414c.github.io/sqac/modeling/md-content-d/",
	"title": "default:",
	"tags": [],
	"description": "",
	"content": "\u0026ldquo;default:\u0026rdquo; Overview Sqac annotated go structs are used to supply the sqac runtime with the information required to create and alter tables in the database. The following examples illustrate the use of the \u0026ldquo;default:\u0026rdquo; \u0026lsquo;sqac:\u0026rsquo; tag described in the Sqac Tag Overview section of this document.\nUse the \u0026ldquo;default:\u0026rdquo; tag to explicitly declare default column values in the database table schema. The default values will be used only if no value has been provided for a defaulted column during record creation. A field with a \u0026ldquo;default:\u0026rdquo; tag will be defaulted at the database level if it contains a null value, or the go zero-value corresponding to the field's go data type.\n\u0026ldquo;default:\u0026lt;value\u0026gt;\u0026rdquo; example The following example illustrates the use of \u0026lsquo;sqac:\u0026rsquo; tag \u0026ldquo;default:\u0026lt;value\u0026gt;\u0026rdquo; to declare a column's default value in the database table schema. Care should be taken to supply default values that correspond to the go data type of the the field/column.\n// Declare a struct to be used as the source for table creation.  // sample default value assignments are shown  type Depot struct { ... Region string `db:\u0026#34;region\u0026#34; sqac:\u0026#34;default:AB\u0026#34;` Efficiency float64 `db:\u0026#34;efficiency\u0026#34; sqac:\u0026#34;default:99.999\u0026#34;` Active bool `db:\u0026#34;active\u0026#34; sqac:\u0026#34;default:true\u0026#34;` ... ... } time.Time \u0026ldquo;default:now()\u0026rdquo; function Most database systems offer a selection of functions to provide default time and/or timestamp values. Sqac uses UTC timestamps as discussed in section X.Y.Z for fields declared as time.Time or *time.Time. \u0026ldquo;default:now()\u0026rdquo; will instruct the database to use its equivalent now() function to provide a default value for the field at time of record insertion. The defaulted value will be created as a UTC timestamp.\n// Declare a struct to be used as the source for table creation.  // field will be defaulted to current timestamp at time of record insertion  type Depot struct { ... CreateDate time.Time `db:\u0026#34;create_date\u0026#34; sqac:\u0026#34;default:now();\u0026#34;` ... ... } time.Time \u0026ldquo;default:eot()\u0026rdquo; function Most database systems offer a selection of functions to provide default date-time and/or timestamp values. Sqac uses UTC timestamps as discussed in section X.Y.Z for fields declared as time.Time or *time.Time. \u0026ldquo;default:eot()\u0026rdquo; will set a default value for the field based on the maximum UTC timestamp supported by the database. Typically this will be along the lines of \u0026lsquo;9999 12 31 235959.999 UTC\u0026rsquo;, but some databases (MySQL/MariaDB) have lower maximum timestamp values.\n// Declare a struct to be used as the source for table creation.  // field will be defaulted to current timestamp at time of record insertion  type Depot struct { ... ExpiryDate time.Time `db:\u0026#34;expiry_date\u0026#34; sqac:\u0026#34;default:eot();\u0026#34;` ... ... } "
},
{
	"uri": "https://1414c.github.io/sqac/modeling/md-content-e/",
	"title": "index:",
	"tags": [],
	"description": "",
	"content": "\u0026ldquo;index:\u0026rdquo; Overview Sqac annotated go structs are used to supply the sqac runtime with the information required to create and alter tables in the database. The following examples illustrate the use of the \u0026ldquo;index:\u0026rdquo; \u0026lsquo;sqac:\u0026rsquo; tag described in the Sqac Tag Overview section of this document.\nUse the \u0026ldquo;index:\u0026rdquo; tag to declare unique/non-unique indexes in database table schemas. Single column and compound indexes are supported.\n\u0026ldquo;index:\u0026lt;unique | non-unique\u0026gt;\u0026rdquo; example The following example illustrates the use of \u0026lsquo;sqac:\u0026rsquo; tag \u0026ldquo;index:\u0026rdquo; to declare a single column unique and single column non-unique index on two table fields. Creation of a unique index on a single column results in an underlying db constraint. The unique constraint prevents the insertion of records when the indexed field contains a duplicate value.\n// Declare a struct to be used as the source for table creation.  type Depot struct { ... Region string `db:\u0026#34;region\u0026#34; sqac:\u0026#34;default:AB;index:non-unique\u0026#34;` // non-unique index  AccountNum int `db:\u0026#34;account_num\u0026#34; sqac:\u0026#34;nullable:false;index:unique\u0026#34;` // unique index  ... ... } \u0026ldquo;index:\u0026rdquo; compound example The following example illustrates the use of \u0026lsquo;sqac:\u0026rsquo; tag \u0026ldquo;index:\u0026rdquo; to declare a multi-column non-unique index using two table fields. As of this writing, sqac does not support the creation of a unique compound index through the \u0026lsquo;sqac:\u0026rsquo; tag model declarations.\nConventionally the compound index should be named as shown in the example below.\nidx_\u0026lt;table_name\u0026gt;_\u0026lt;field_name1\u0026gt;_\u0026lt;field_name2\u0026gt;_\u0026lt;field_name*n*\u0026gt;\n// Declare a struct to be used as the source for table creation.  type Depot struct { ... Country string `db:\u0026#34;country\u0026#34; sqac:\u0026#34;nullable:false;default:CA;index:idx_depot_country_province\u0026#34;` Province string `db:\u0026#34;province\u0026#34; sqac:\u0026#34;nullable:false;default:AB;index:idx_depot_country_province\u0026#34;` ... ... } "
},
{
	"uri": "https://1414c.github.io/sqac/modeling/md-content-f/",
	"title": "constraint:",
	"tags": [],
	"description": "",
	"content": "\u0026ldquo;constraint:\u0026lt;value\u0026gt;\u0026rdquo; Overview Sqac annotated go structs are used to supply the sqac runtime with the information required to create and alter tables in the database. The following examples illustrate the use of the \u0026ldquo;constraint:\u0026rdquo; \u0026lsquo;sqac:\u0026rsquo; tag described in the Sqac Tag Overview section of this document.\nThe \u0026ldquo;constraint:\u0026rdquo; tag is presently only used to declare unique constraints on single columns. It would be relatively simple to add support for any desired database constraint however.\n\u0026ldquo;constraint:unique\u0026rdquo; example The following example illustrates the use of \u0026lsquo;sqac:\u0026rsquo; tag \u0026ldquo;constraint:\u0026rdquo; to declare a unique column constraint. Creation of a unique constraint on a single column results in an underlying db constraint, but does not necessarily create an index on the constrained column. Check the target db documentation for details.\nIf a column has been declared with a single-column index, the \u0026ldquo;constraint:unique\u0026rdquo; tag is redundant. If a column has been declared with unique constraint, it may still be included in a compound \u0026ldquo;index:\u0026rdquo; declaration.\n// Declare a struct to be used as the source for table creation.  type Depot struct { ... AccountNum int `db:\u0026#34;account_num\u0026#34; sqac:\u0026#34;nullable:false;constraint:unique\u0026#34;` // unique constraint  ... ... } "
},
{
	"uri": "https://1414c.github.io/sqac/modeling/md-content-g/",
	"title": "non-persistent tag",
	"tags": [],
	"description": "",
	"content": "non-persistent tag Overview Sqac annotated go structs are used to supply the sqac runtime with the information required to create and alter tables in the database. The following examples illustrate the use of the \u0026ldquo;-\u0026rdquo; \u0026lsquo;sqac:\u0026rsquo; tag described in the Sqac Tag Overview section of this document.\nThe \u0026ldquo;-\u0026rdquo; tag is used to declare a field in the source go struct as being non-persistent (not present) in the database table schema. Non-persistent fields are useful for values that are to be determined client-side, or for input fields that should not be saved.\n\u0026ldquo;-\u0026rdquo; example The following example illustrates the use of \u0026lsquo;sqac:\u0026rsquo; tag \u0026ldquo;-\u0026rdquo; to declare a go struct field as non-persistent in the database.\n// Declare a struct to be used as the source for table creation.  type Depot struct { ... Password string `db:\u0026#34;password\u0026#34; sqac:\u0026#34;-\u0026#34;` // column will not be created in the database  ... ... } "
},
{
	"uri": "https://1414c.github.io/sqac/modeling/md-content-h/",
	"title": "fkey:",
	"tags": [],
	"description": "",
	"content": "\u0026ldquo;fkey:\u0026rdquo; Overview Sqac annotated go structs are used to supply the sqac runtime with the information required to create and alter tables in the database. The following examples illustrate the use of the \u0026ldquo;fkey:\u0026rdquo; \u0026lsquo;sqac:\u0026rsquo; tag described in the Sqac Tag Overview section of this document.\nThe \u0026ldquo;fkey:\u0026rdquo; tag is used to declare a foreign key for a column in the source go struct. Declaration of a foreign-key results in a foreign-key constraint on the assigned column, thereby limiting its allowable values to those found in the table.column referenced in the foreign-key declaration.\n\u0026ldquo;fkey:\u0026lt;ftable_name\u0026gt;(\u0026lt;fcolumn_name\u0026gt;)\u0026rdquo; Overview The following example illustrates the use of the \u0026ldquo;fkey:\u0026rdquo; tag to declare a foreign key for table column product.warehouse_id. Following the creation of tables \u0026ldquo;warehouse\u0026rdquo; and \u0026ldquo;product\u0026rdquo;, the foreign-key constraints in the model will be evaluated by the sqac runtime. Both tables must exist in the database in order for the creation of the new constraint to be possible.\nOnce the foreign-key constraint has been created on column product.warehouse_id, it will only permit values that exist in table column warehouse.id.\ntype Warehouse struct { ID uint64 `db:\u0026#34;id\u0026#34; json:\u0026#34;id\u0026#34; sqac:\u0026#34;primary_key:inc;start:40000000\u0026#34;` City string `db:\u0026#34;city\u0026#34; json:\u0026#34;city\u0026#34; sqac:\u0026#34;nullable:false;default:Calgary\u0026#34;` Quadrant string `db:\u0026#34;quadrant\u0026#34; json:\u0026#34;quadrant\u0026#34; sqac:\u0026#34;nullable:false;default:SE\u0026#34;` } type Product struct { ID uint64 `db:\u0026#34;id\u0026#34; json:\u0026#34;id\u0026#34; sqac:\u0026#34;primary_key:inc;start:95000000\u0026#34;` ProductName string `db:\u0026#34;product_name\u0026#34; json:\u0026#34;product_name\u0026#34; sqac:\u0026#34;nullable:false;default:unknown\u0026#34;` ProductCode string `db:\u0026#34;product_code\u0026#34; json:\u0026#34;product_code\u0026#34; sqac:\u0026#34;nullable:false;default:0000-0000-00\u0026#34;` UOM string `db:\u0026#34;uom\u0026#34; json:\u0026#34;uom\u0026#34; sqac:\u0026#34;nullable:false;default:EA\u0026#34;` // foreign-key declared against table \u0026#34;warehouse\u0026#34;, column \u0026#34;id\u0026#34;  WarehouseID uint64 `db:\u0026#34;warehouse_id\u0026#34; json:\u0026#34;warehouse_id\u0026#34; sqac:\u0026#34;nullable:false;fkey:warehouse(id)\u0026#34;` } Sqac Foreign-Key Naming Standard By sqac convention, foreign-keys will be created using the following naming standard:\n\u0026ldquo;fk_product_warehouse_id\u0026rdquo; which equates to:\n**\u0026ldquo;fk_\u0026lt;from_table\u0026gt;_\u0026lt;ref_table\u0026gt;_\u0026lt;ref_table_key_column\u0026gt;\u0026rdquo;**\n"
},
{
	"uri": "https://1414c.github.io/sqac/public-db/",
	"title": "PublicDB API",
	"tags": [],
	"description": "",
	"content": "The PublicDB API How to use sqac The sqac.PublicDB API can be used to access the ORM's functionality. There are a number of methods that can be used to create / adjust tables and access their data. Only the most useful methods for the end-consumer have been documented in this section.\nInspection of the sqac.PublicDB interface declaration will reveal a number of undocumented public methods. The undocumented methods can be used by consumers of the sqac package, but are primarily intended for internal use within the database dialect implementations. It is generally a better idea to make use of sqac-tags as explained in the modeling overview rather than call the undocumented PublicDB methods.\n"
},
{
	"uri": "https://1414c.github.io/sqac/public-db/a-pdb-handle/",
	"title": "Getting a PublicDB Handle",
	"tags": [],
	"description": "",
	"content": "Before using the sqac API, a connection must be established to the target database. The main interface used by sqac is called PublicDB and we will call this the so-called Handle variable in the sample code.\n// Handle will be the central access-point to the ORM and should be made  // available in all locations where access to the persistent storage  // (database) is required.  var ( Handle sqac.PublicDB ) Once the Handle variable has been declared, an instance must be created via the sqac.Create function. The sqac.Create call requires information regarding the type of database, whether logging should be activated, as well as a connection string for the database. sqac.Create will fail in an absolute way if it encounters a problem. It is therefore reasonably safe to just use the returned Handle variable without additional checking. If sqac.Create does not result in a fatal error, it is safe to proceed.\nSamples for each of the supported database systems follow:\nHandle to PostgreSQL // Create a PublicDB instance for PostGreSQL  cs := \u0026#34;host=127.0.0.1 user=my_uname dbname=my_dbname sslmode=disable password=my_passwd\u0026#34; Handle = sqac.Create(\u0026#34;postgres\u0026#34;, false, false, cs) Handle to MSSQL // Create a PublicDB instance for MSSQL  cs := \u0026#34;sqlserver://SA:my_passwd@localhost:1401?database=my_dbname\u0026#34; Handle = sqac.Create(\u0026#34;mssql\u0026#34;, false, false, cs) Handle to Sqlite // Create a PublicDB instance for Sqlite  cs := \u0026#34;testdb.sqlite\u0026#34; Handle = sqac.Create(\u0026#34;sqlite\u0026#34;, false, false, cs) Handle to MySQL // Create a PublicDB instance for MySQL  cs := \u0026#34;my_uname:my_passwd@tcp(192.168.1.10:3306)/my_dbname?charset=utf8\u0026amp;parseTime=True\u0026amp;loc=Local\u0026#34; Handle = sqac.Create(\u0026#34;mysql\u0026#34;, false, false, cs) Handle to SAP Hana // Create a PublicDB instance for SAP Hana  cs := \u0026#34;hdb://my_uname:my_passwd@192.168.111.45:30015\u0026#34; Handle = sqac.Create(\u0026#34;hdb\u0026#34;, false, false, cs) "
},
{
	"uri": "https://1414c.github.io/sqac/public-db/b-pdb-create-tables/",
	"title": "CreateTables",
	"tags": [],
	"description": "",
	"content": "The CreateTables method is used to create one or more tables in the target database. CreateTables accepts one or more go struct definitions that have been annotated with \u0026ldquo;sqac:\u0026rdquo; tags and uses the provided information to create new tables in the database.\nErrors encountered during table creation are returned to the caller immediately. This may result in the incomplete processing of the tables contained in parameter i \u0026hellip;interface{}. CreateTables Example // Declare a struct to be used as the source for table creation.  type Depot struct { DepotNum int `db:\u0026#34;depot_num\u0026#34; sqac:\u0026#34;primary_key:inc\u0026#34;` CreateDate time.Time `db:\u0026#34;create_date\u0026#34; sqac:\u0026#34;nullable:false;default:now();\u0026#34;` Country string `db:\u0026#34;country\u0026#34; sqac:\u0026#34;nullable:false;default:CA\u0026#34;` Province string `db:\u0026#34;province\u0026#34; sqac:\u0026#34;nullable:false;default:AB\u0026#34;` Region string `db:\u0026#34;region\u0026#34; sqac:\u0026#34;nullable:false;default:YYC\u0026#34;` Population int `db:\u0026#34;population\u0026#34; sqac:\u0026#34;nullable:false;default:0;index:non-unique\u0026#34;` } The struct shown above can be used by sqac to create a table named \u0026ldquo;depot\u0026rdquo; in the target database. In order to call the PublicDB.CreateTables() method, an instance of PublicDB must be created and connected to the database. A small sample program illustrating the creation of table \u0026ldquo;depot\u0026rdquo; follows:\npackage main import ( \u0026#34;log\u0026#34; \u0026#34;github.com/1414C/sqac\u0026#34; _ \u0026#34;github.com/SAP/go-hdb/driver\u0026#34; _ \u0026#34;github.com/denisenkom/go-mssqldb\u0026#34; _ \u0026#34;github.com/go-sql-driver/mysql\u0026#34; _ \u0026#34;github.com/lib/pq\u0026#34; _ \u0026#34;github.com/mattn/go-sqlite3\u0026#34; ) func main() { var ( Handle sqac.PublicDB ) // Declare a struct to be used as the source for table creation  type Depot struct { DepotNum int `db:\u0026#34;depot_num\u0026#34; sqac:\u0026#34;primary_key:inc\u0026#34;` CreateDate time.Time `db:\u0026#34;create_date\u0026#34; sqac:\u0026#34;nullable:false;default:now();\u0026#34;` Country string `db:\u0026#34;country\u0026#34; sqac:\u0026#34;nullable:false;default:CA\u0026#34;` Province string `db:\u0026#34;province\u0026#34; sqac:\u0026#34;nullable:false;default:AB\u0026#34;` Region string `db:\u0026#34;region\u0026#34; sqac:\u0026#34;nullable:false;default:YYC\u0026#34;` Population int `db:\u0026#34;population\u0026#34; sqac:\u0026#34;nullable:false;default:0;index:non-unique\u0026#34;` } // Create a PublicDB instance to connect to the test sqlite db  Handle = sqac.Create(\u0026#34;sqlite\u0026#34;, false, false, \u0026#34;testdb.sqlite\u0026#34;) // Create a new table in the database  err := Handle.CreateTables(Depot{}) if err != nil { log.Errorf(\u0026#34;%s\u0026#34;, err.Error()) } // Close the connection  Handle.Close() } Create Table with Nested Structs Table declarations may also contain nested structs. In the following example, struct Triplet is defined with db and sqac tags and then included in struct Equipment. When CreateTables(Equipment{}) is executed, the nested struct is unpacked resulting in the creation of a table containing the merged fields of structs Triplet and Equipment. Any number of structs may be included in a sqac table declaration, and the nesting depth is limited only by the Go compiler.\ntype Triplet struct { TripOne string `db:\u0026#34;trip_one\u0026#34; sqac:\u0026#34;nullable:false\u0026#34;` TripTwo int64 `db:\u0026#34;trip_two\u0026#34; sqac:\u0026#34;nullable:false;default:0\u0026#34;` Tripthree string `db:\u0026#34;trip_three\u0026#34; sqac:\u0026#34;nullable:false\u0026#34;` } type Equipment struct { EquipmentNum int64 `db:\u0026#34;equipment_num\u0026#34; sqac:\u0026#34;primary_key:inc;start:55550000\u0026#34;` ValidFrom time.Time `db:\u0026#34;valid_from\u0026#34; sqac:\u0026#34;primary_key;nullable:false;default:now()\u0026#34;` ValidTo time.Time `db:\u0026#34;valid_to\u0026#34; sqac:\u0026#34;primary_key;nullable:false;default:make_timestamptz(9999, 12, 31, 23, 59, 59.9)\u0026#34;` CreatedAt time.Time `db:\u0026#34;created_at\u0026#34; sqac:\u0026#34;nullable:false;default:now()\u0026#34;` InspectionAt time.Time `db:\u0026#34;inspection_at\u0026#34; sqac:\u0026#34;nullable:true\u0026#34;` MaterialNum int `db:\u0026#34;material_num\u0026#34; sqac:\u0026#34;index:idx_material_num_serial_num\u0026#34;` Description string `db:\u0026#34;description\u0026#34; sqac:\u0026#34;sqac:nullable:false\u0026#34;` SerialNum string `db:\u0026#34;serial_num\u0026#34; sqac:\u0026#34;index:idx_material_num_serial_num\u0026#34;` Triplet // structs can be nested to any level } "
},
{
	"uri": "https://1414c.github.io/sqac/public-db/c-pdb-drop-tables/",
	"title": "DropTables",
	"tags": [],
	"description": "",
	"content": "The DropTables method is used to drop one or more tables in the target database. DropTables accepts one or more go struct definitions that have been annotated with \u0026ldquo;sqac:\u0026rdquo; tags and uses the provided information to drop tables in the database. Note that the DropTables method will not attempt to drop a table that does not exist in the target database. In such a case, no error is reported as the database is already in the desired state.\nErrors encountered during table creation are returned to the caller immediately. This may result in the incomplete processing of the tables contained in parameter i \u0026hellip;interface{}.\ntype Depot struct { DepotNum int `db:\u0026#34;depot_num\u0026#34; sqac:\u0026#34;primary_key:inc\u0026#34;` CreateDate time.Time `db:\u0026#34;create_date\u0026#34; sqac:\u0026#34;nullable:false;default:now();\u0026#34;` Country string `db:\u0026#34;country\u0026#34; sqac:\u0026#34;nullable:false;default:CA\u0026#34;` Province string `db:\u0026#34;province\u0026#34; sqac:\u0026#34;nullable:false;default:AB\u0026#34;` Region string `db:\u0026#34;region\u0026#34; sqac:\u0026#34;nullable:false;default:YYC\u0026#34;` } The struct shown above can be used by sqac to refer to a table named \u0026ldquo;depot\u0026rdquo; in the target database. In order to call the PublicDB.DropTables() method, an instance of PublicDB must be created and connected to the database.\nDropTables Example A small sample program illustrating the dropping of table \u0026ldquo;depot\u0026rdquo; follows:\npackage main import ( \u0026#34;log\u0026#34; \u0026#34;github.com/1414C/sqac\u0026#34; _ \u0026#34;github.com/SAP/go-hdb/driver\u0026#34; _ \u0026#34;github.com/denisenkom/go-mssqldb\u0026#34; _ \u0026#34;github.com/go-sql-driver/mysql\u0026#34; _ \u0026#34;github.com/lib/pq\u0026#34; _ \u0026#34;github.com/mattn/go-sqlite3\u0026#34; ) func main() { var ( Handle sqac.PublicDB ) // Struct related to database table \u0026#34;depot\u0026#34;  type Depot struct { DepotNum int `db:\u0026#34;depot_num\u0026#34; sqac:\u0026#34;primary_key:inc\u0026#34;` CreateDate time.Time `db:\u0026#34;create_date\u0026#34; sqac:\u0026#34;nullable:false;default:now();\u0026#34;` Country string `db:\u0026#34;country\u0026#34; sqac:\u0026#34;nullable:false;default:CA\u0026#34;` Province string `db:\u0026#34;province\u0026#34; sqac:\u0026#34;nullable:false;default:AB\u0026#34;` Region string `db:\u0026#34;region\u0026#34; sqac:\u0026#34;nullable:false;default:YYC\u0026#34;` Population int `db:\u0026#34;population\u0026#34; sqac:\u0026#34;nullable:false;default:0;index:non-unique\u0026#34;` } // Create a PublicDB instance to connect to the test sqlite db  Handle = sqac.Create(\u0026#34;sqlite\u0026#34;, false, false, \u0026#34;testdb.sqlite\u0026#34;) // Drop table \u0026#34;depot\u0026#34; in the target database  err := Handle.DropTables(Depot{}) if err != nil { log.Errorf(\u0026#34;%s\u0026#34;, err.Error()) } // Close the connection  Handle.Close() } "
},
{
	"uri": "https://1414c.github.io/sqac/public-db/d-pdb-alter-tables/",
	"title": "AlterTables",
	"tags": [],
	"description": "",
	"content": "The AlterTables method can be used to introduce additive changes to existing tables, or create new tables if the tables contained in the variadic parameter list are not present in the database. Permissible table changes include:\n adding one or more columns addition of simple or compound indices addition of foreign-key relationships, as long as the existing data permits it  Inadmissible table changes include:\n changing the type of an existing column changing the name of an existing column updating the properties of an existing column (nullable/default) deleting an existing column deleting an index deleting an existing foreign-key relationship  To deal with inadmissible changes, it is best to call DropTables followed by CreateTables, or call the DestructiveResetTables method.\nErrors encountered while processing table alterations are returned to the caller immediately. This may result in the incomplete processing of the tables contained in parameter i \u0026hellip;interface{}. AlterTables Example The following structure \u0026lsquo;Depot\u0026rsquo; has been used to create table \u0026ldquo;depot\u0026rdquo; in the target database. We will add a new column and a new index to the table via the AlterTables method.\ntype Depot struct { DepotNum int `db:\u0026#34;depot_num\u0026#34; sqac:\u0026#34;primary_key:inc\u0026#34;` CreateDate time.Time `db:\u0026#34;create_date\u0026#34; sqac:\u0026#34;nullable:false;default:now();\u0026#34;` Country string `db:\u0026#34;country\u0026#34; sqac:\u0026#34;nullable:false;default:CA\u0026#34;` Province string `db:\u0026#34;province\u0026#34; sqac:\u0026#34;nullable:false;default:AB\u0026#34;` Region string `db:\u0026#34;region\u0026#34; sqac:\u0026#34;nullable:false;default:YYC\u0026#34;` Population int `db:\u0026#34;population\u0026#34; sqac:\u0026#34;nullable:false;default:0;index:non-unique\u0026#34;` } Column \u0026ldquo;county\u0026rdquo; and index \u0026ldquo;idx_depot_region_county\u0026rdquo; have been added to the Depot struct declaration:\ntype Depot struct { DepotNum int `db:\u0026#34;depot_num\u0026#34; sqac:\u0026#34;primary_key:inc\u0026#34;` CreateDate time.Time `db:\u0026#34;create_date\u0026#34; sqac:\u0026#34;nullable:false;default:now();\u0026#34;` Country string `db:\u0026#34;country\u0026#34; sqac:\u0026#34;nullable:false;default:CA\u0026#34;` Province string `db:\u0026#34;province\u0026#34; sqac:\u0026#34;nullable:false;default:AB\u0026#34;` // --\u0026gt; start of the alterations  Region string `db:\u0026#34;region\u0026#34; sqac:\u0026#34;nullable:false;default:YYC;index:idx_depot_region_county\u0026#34;` County string `db:\u0026#34;county\u0026#34; sqac:\u0026#34;nullable:false;index:idx_depot_region_county\u0026#34;` Population int `db:\u0026#34;population\u0026#34; sqac:\u0026#34;nullable:false;default:0;index:non-unique\u0026#34;` // --\u0026gt; end of the alterations  } A complete sample program to alter table \u0026ldquo;depot\u0026rdquo; is shown below:\npackage main import ( \u0026#34;log\u0026#34; \u0026#34;github.com/1414C/sqac\u0026#34; _ \u0026#34;github.com/SAP/go-hdb/driver\u0026#34; _ \u0026#34;github.com/denisenkom/go-mssqldb\u0026#34; _ \u0026#34;github.com/go-sql-driver/mysql\u0026#34; _ \u0026#34;github.com/lib/pq\u0026#34; _ \u0026#34;github.com/mattn/go-sqlite3\u0026#34; ) func main() { var ( Handle sqac.PublicDB ) // Original Depot declaration - left for illustrative purposes  // type Depot struct {  // DepotNum int `db:\u0026#34;depot_num\u0026#34; sqac:\u0026#34;primary_key:inc\u0026#34;`  // CreateDate time.Time `db:\u0026#34;create_date\u0026#34; sqac:\u0026#34;nullable:false;default:now();\u0026#34;`  // Country string `db:\u0026#34;country\u0026#34; sqac:\u0026#34;nullable:false;default:CA\u0026#34;`  // Province string `db:\u0026#34;province\u0026#34; sqac:\u0026#34;nullable:false;default:AB\u0026#34;`  // Region string `db:\u0026#34;region\u0026#34; sqac:\u0026#34;nullable:false;default:YYC\u0026#34;`  // Population int `db:\u0026#34;population\u0026#34; sqac:\u0026#34;nullable:false;default:0;index:non-unique\u0026#34;`  // }  // updated Depot declaration with new field \u0026#34;County\u0026#34; and new index \u0026#34;idx_depot_region_county\u0026#34;  type Depot struct { DepotNum int `db:\u0026#34;depot_num\u0026#34; sqac:\u0026#34;primary_key:inc\u0026#34;` CreateDate time.Time `db:\u0026#34;create_date\u0026#34; sqac:\u0026#34;nullable:false;default:now();\u0026#34;` Country string `db:\u0026#34;country\u0026#34; sqac:\u0026#34;nullable:false;default:CA\u0026#34;` Province string `db:\u0026#34;province\u0026#34; sqac:\u0026#34;nullable:false;default:AB\u0026#34;` Region string `db:\u0026#34;region\u0026#34; sqac:\u0026#34;nullable:false;default:YYC;index:idx_depot_region_county\u0026#34;` County string `db:\u0026#34;county\u0026#34; sqac:\u0026#34;nullable:false;index:idx_depot_region_county\u0026#34;` Population int `db:\u0026#34;population\u0026#34; sqac:\u0026#34;nullable:false;default:0;index:non-unique\u0026#34;` } // Create a PublicDB instance to connect to the test sqlite db  Handle = sqac.Create(\u0026#34;sqlite\u0026#34;, false, false, \u0026#34;testdb.sqlite\u0026#34;) // Alter table \u0026#34;depot\u0026#34; in the target database  err := Handle.AlterTables(Depot{}) if err != nil { log.Errorf(\u0026#34;%s\u0026#34;, err.Error()) } // Close the connection  Handle.Close() } "
},
{
	"uri": "https://1414c.github.io/sqac/public-db/e-pdb-destructive-reset-tables/",
	"title": "DestructiveResetTables",
	"tags": [],
	"description": "",
	"content": "The DestructiveResetTables method is used to drop and recreate one or more tables in the target database. DestructiveResetTables accepts one or more go struct definitions that have been annotated with \u0026ldquo;sqac:\u0026rdquo; tags and uses the provided information to drop and recreate the tables in the database. Note that the DestructiveResetTables method will not attempt to drop a table that does not exist in the target database. It follows that the data in the existing table will be lost unless backed up prior to the call to the DestructiveResetTables method.\nIf a table in the parameter list does not exist in the database, the method will simply create it using the information provided in the struct tags. No effort is made to determine deltas between existing database tables and their replacement declaration in the incoming parameter list.\nErrors encountered during table drop / creation are returned to the caller immediately. This may result in the incomplete processing of the tables contained in parameter i \u0026hellip;interface{}.\nDestructiveResetTables Example The following structure \u0026lsquo;Depot\u0026rsquo; has been used to create table \u0026ldquo;depot\u0026rdquo; in the target database. We will change the type of the Region field to an integer value, thereby necessitating a drop and recreation of the table in the database.\ntype Depot struct { DepotNum int `db:\u0026#34;depot_num\u0026#34; sqac:\u0026#34;primary_key:inc\u0026#34;` CreateDate time.Time `db:\u0026#34;create_date\u0026#34; sqac:\u0026#34;nullable:false;default:now();\u0026#34;` Region string `db:\u0026#34;region\u0026#34; sqac:\u0026#34;nullable:false;default:YYC\u0026#34;` Province string `db:\u0026#34;province\u0026#34; sqac:\u0026#34;nullable:false;default:AB\u0026#34;` Country string `db:\u0026#34;country\u0026#34; sqac:\u0026#34;nullable:false;default:CA\u0026#34;` Population int `db:\u0026#34;population\u0026#34; sqac:\u0026#34;nullable:false;default:0;index:non-unique\u0026#34;` } The data type of column \u0026ldquo;Region\u0026rdquo; has been updated from \u0026lsquo;string\u0026rsquo; to \u0026lsquo;int\u0026rsquo; in the Depot struct declaration:\ntype Depot struct { DepotNum int `db:\u0026#34;depot_num\u0026#34; sqac:\u0026#34;primary_key:inc\u0026#34;` CreateDate time.Time `db:\u0026#34;create_date\u0026#34; sqac:\u0026#34;nullable:false;default:now();\u0026#34;` // --\u0026gt; start of the alterations  Region int `db:\u0026#34;region\u0026#34; sqac:\u0026#34;nullable:false;default:0\u0026#34;` // --\u0026gt; end of the alterations  Province string `db:\u0026#34;province\u0026#34; sqac:\u0026#34;nullable:false;default:AB\u0026#34;` Country string `db:\u0026#34;country\u0026#34; sqac:\u0026#34;nullable:false;default:CA\u0026#34;` Population int `db:\u0026#34;population\u0026#34; sqac:\u0026#34;nullable:false;default:0;index:non-unique\u0026#34;` } A complete sample program to perform the destructive reset of existing table \u0026ldquo;depot\u0026rdquo; is shown below:\npackage main import ( \u0026#34;log\u0026#34; \u0026#34;github.com/1414C/sqac\u0026#34; _ \u0026#34;github.com/SAP/go-hdb/driver\u0026#34; _ \u0026#34;github.com/denisenkom/go-mssqldb\u0026#34; _ \u0026#34;github.com/go-sql-driver/mysql\u0026#34; _ \u0026#34;github.com/lib/pq\u0026#34; _ \u0026#34;github.com/mattn/go-sqlite3\u0026#34; ) func main() { var ( Handle sqac.PublicDB ) // Original Depot declaration - left for illustrative purposes  // type Depot struct {  // DepotNum int `db:\u0026#34;depot_num\u0026#34; sqac:\u0026#34;primary_key:inc\u0026#34;`  // CreateDate time.Time `db:\u0026#34;create_date\u0026#34; sqac:\u0026#34;nullable:false;default:now();\u0026#34;`  // Country string `db:\u0026#34;country\u0026#34; sqac:\u0026#34;nullable:false;default:CA\u0026#34;`  // Province string `db:\u0026#34;province\u0026#34; sqac:\u0026#34;nullable:false;default:AB\u0026#34;`  // Region string `db:\u0026#34;region\u0026#34; sqac:\u0026#34;nullable:false;default:YYC\u0026#34;`  // Population int `db:\u0026#34;population\u0026#34; sqac:\u0026#34;nullable:false;default:0;index:non-unique\u0026#34;`  // }  // updated Depot declaration with new data type int assigned to field \u0026#34;Region\u0026#34;  type Depot struct { DepotNum int `db:\u0026#34;depot_num\u0026#34; sqac:\u0026#34;primary_key:inc\u0026#34;` CreateDate time.Time `db:\u0026#34;create_date\u0026#34; sqac:\u0026#34;nullable:false;default:now();\u0026#34;` Country string `db:\u0026#34;country\u0026#34; sqac:\u0026#34;nullable:false;default:CA\u0026#34;` Province string `db:\u0026#34;province\u0026#34; sqac:\u0026#34;nullable:false;default:AB\u0026#34;` Region string `db:\u0026#34;region\u0026#34; sqac:\u0026#34;nullable:false;default:YYC\u0026#34;` Population int `db:\u0026#34;population\u0026#34; sqac:\u0026#34;nullable:false;default:0;index:non-unique\u0026#34;` } // Create a PublicDB instance to connect to the test sqlite db  Handle = sqac.Create(\u0026#34;sqlite\u0026#34;, false, false, \u0026#34;testdb.sqlite\u0026#34;) // Drop and recreate table \u0026#34;depot\u0026#34; in the target database via destructive reset  err := Handle.DestuctiveResetTables(Depot{}) if err != nil { log.Errorf(\u0026#34;%s\u0026#34;, err.Error()) } // Close the connection  Handle.Close() } "
},
{
	"uri": "https://1414c.github.io/sqac/public-db/f-pdb-exists-table/",
	"title": "ExistsTable",
	"tags": [],
	"description": "",
	"content": "The ExistsTable method is used to check whether a table exists in the target database. ExistsTable accepts a single string argument containing the name of the table to be checked in the database. If the table is found, a \u0026lsquo;true\u0026rsquo; value will be returned to the caller.\nExistsTable differs from the other *Tables methods in that it does not require the table's go struct declaration to determine the table name. A string value is used, as this is the only information the method requires to carry out its task, and it is quite likely that the caller already knows the string name before the call is made.\nThe database name of a table related to a go struct containing \u0026lsquo;db:'/\u0026lsquo;sqac:\u0026rsquo; tags may be determined via package function sqac.GetTableName.\nErrors encountered during the ExistsTable method are returned to the caller immediately as a \u0026lsquo;false\u0026rsquo; response.\nExistsTable Example The following structure \u0026lsquo;Depot\u0026rsquo; has been used to create table \u0026ldquo;depot\u0026rdquo; in the target database. We will change the type of the Region field to an integer value, thereby necessitating a drop and recreation of the table in the database.\nA complete sample program to perform the destructive reset of existing table \u0026ldquo;depot\u0026rdquo; is shown below:\npackage main import ( \u0026#34;log\u0026#34; \u0026#34;github.com/1414C/sqac\u0026#34; _ \u0026#34;github.com/SAP/go-hdb/driver\u0026#34; _ \u0026#34;github.com/denisenkom/go-mssqldb\u0026#34; _ \u0026#34;github.com/go-sql-driver/mysql\u0026#34; _ \u0026#34;github.com/lib/pq\u0026#34; _ \u0026#34;github.com/mattn/go-sqlite3\u0026#34; ) func main() { var ( Handle sqac.PublicDB ) // Original Depot declaration - left for illustrative purposes  type Depot struct { DepotNum int `db:\u0026#34;depot_num\u0026#34; sqac:\u0026#34;primary_key:inc\u0026#34;` CreateDate time.Time `db:\u0026#34;create_date\u0026#34; sqac:\u0026#34;nullable:false;default:now();\u0026#34;` Country string `db:\u0026#34;country\u0026#34; sqac:\u0026#34;nullable:false;default:CA\u0026#34;` Province string `db:\u0026#34;province\u0026#34; sqac:\u0026#34;nullable:false;default:AB\u0026#34;` Region string `db:\u0026#34;region\u0026#34; sqac:\u0026#34;nullable:false;default:YYC\u0026#34;` Population int `db:\u0026#34;population\u0026#34; sqac:\u0026#34;nullable:false;default:0;index:non-unique\u0026#34;` } // Create a PublicDB instance to connect to the test sqlite db  Handle = sqac.Create(\u0026#34;sqlite\u0026#34;, false, false, \u0026#34;testdb.sqlite\u0026#34;) defer Handle.Close() // Determine the table name in the database (optional)  tn := sqac.GetTableName(Depot{}) if tn == \u0026#34;\u0026#34; { log.Fatalf(\u0026#34;Unable to determine table name for struct %v\u0026#34;, Depot{}) } if Handle.TableExists(tn) { log.Printf(\u0026#34;Table %s exists in the database.\\n\u0026#34;, tn ) } else { log.Printf(\u0026#34;Table %s was not found in the database.\\n\u0026#34;, tn ) } } "
},
{
	"uri": "https://1414c.github.io/sqac/public-db/g-pdb-create-index/",
	"title": "CreateIndex",
	"tags": [],
	"description": "",
	"content": "CreateIndex creates the index contained in the incoming IndexInfo structure. Indexes are created as non-unique by default, and in compound index situations the fields (columns) will be added to the index in the order they are contained in the IndexInfo.[]IndexFields slice.\nCare should be taken when providing an index name, as the value of input variable \u0026lsquo;in\u0026rsquo; is used verbatim when the index is created in the database. The suggested format for index naming is as follows:\n\u0026ldquo;idx_\u0026rdquo; + table_name + \u0026ldquo;_\u0026rdquo; + column_name1 + \u0026ldquo;_\u0026rdquo; + column_name2 + \u0026ldquo;_\u0026rdquo; + \u0026hellip;\nIncorporating the table name in the index name will prevent index name collisions in the target database.\nGenerally speaking, it is best to maintain indexes via changes to the \u0026lsquo;sqac:\u0026rsquo; tag attributes in the go struct related to the target database table. CreateIndex is provided as a convenience mechanism for (rare?) situations where changes to the model are prohibited, or where an index is required temporarily.\nErrors encountered during CreateIndex execution are returned to the caller immediately\nCreateIndex Example The following structure \u0026lsquo;Depot\u0026rsquo; has been used to create table \u0026ldquo;depot\u0026rdquo; in the target database. We will subsequently use the PublicDB.CreateIndex() method to create a new non-unique index on table columns \u0026ldquo;region\u0026rdquo; and \u0026ldquo;county\u0026rdquo;:\npackage main import ( \u0026#34;log\u0026#34; \u0026#34;github.com/1414C/sqac\u0026#34; _ \u0026#34;github.com/SAP/go-hdb/driver\u0026#34; _ \u0026#34;github.com/denisenkom/go-mssqldb\u0026#34; _ \u0026#34;github.com/go-sql-driver/mysql\u0026#34; _ \u0026#34;github.com/lib/pq\u0026#34; _ \u0026#34;github.com/mattn/go-sqlite3\u0026#34; ) func main() { var ( Handle sqac.PublicDB ) // table depot declaration - no index  type Depot struct { DepotNum int `db:\u0026#34;depot_num\u0026#34; sqac:\u0026#34;primary_key:inc\u0026#34;` CreateDate time.Time `db:\u0026#34;create_date\u0026#34; sqac:\u0026#34;nullable:false;default:now();\u0026#34;` Country string `db:\u0026#34;country\u0026#34; sqac:\u0026#34;nullable:false;default:CA\u0026#34;` Province string `db:\u0026#34;province\u0026#34; sqac:\u0026#34;nullable:false;default:AB\u0026#34;` Region string `db:\u0026#34;region\u0026#34; sqac:\u0026#34;nullable:false;default:YYC\u0026#34;` County string `db:\u0026#34;county\u0026#34; sqac:\u0026#34;nullable:false\u0026#34;` Population int `db:\u0026#34;population\u0026#34; sqac:\u0026#34;nullable:false;default:0;index:non-unique\u0026#34;` } // Create a PublicDB instance to connect to the test sqlite db  Handle = sqac.Create(\u0026#34;sqlite\u0026#34;, false, false, \u0026#34;testdb.sqlite\u0026#34;) defer Handle.Close() // Ensure table \u0026#34;depot\u0026#34; exists in the database  err := Handle.DestructiveResetTables(Depot{}) if err != nil { log.Fatalf(\u0026#34;%s\u0026#34;, err.Error()) } // Determine the table name in the database  tn := sqac.GetTableName(Depot{}) // \u0026#34;depot\u0026#34;  if tn == \u0026#34;\u0026#34; { log.Fatalf(\u0026#34;Unable to determine table name for struct %v\u0026#34;, Depot{}) } // Create the new index (without checking for its existence).  // See PublicDB.ExistsIndex()  var indexInfo sqac.IndexInfo indexInfo.TableName = tn indexInfo.Unique = false indexInfo.IndexFields = []string{\u0026#34;region\u0026#34;, \u0026#34;county\u0026#34;} err = Handle.CreateIndex(\u0026#34;idx_depot_region_county\u0026#34;, indexInfo) if err != nil { log.Errorf(\u0026#34;%s\u0026#34;, err.Error()) } Handle.Close() } "
},
{
	"uri": "https://1414c.github.io/sqac/public-db/h-pdb-drop-index/",
	"title": "DropIndex",
	"tags": [],
	"description": "",
	"content": "DropIndex drops named index \u0026ldquo;in\u0026rdquo; on database table \u0026ldquo;tn\u0026rdquo;. The method performs a check for the existence of the specified index prior to initiating the drop request to the database. In the event that the specified index does not exist, no error is returned as the database is deemed to be in the correct state.\nWhen using DropIndex it is important to consider whether the table's source model (go struct annotated with \u0026lsquo;sqac:\u0026rsquo; tags) contains the index declaration. If the dropped index remains in the source go struct's \u0026lsquo;sqac:\u0026rsquo; tags it will be recreated if PublicDB.AlterTables is called with said go struct in the future.\nErrors encountered during DropIndex execution are returned to the caller immediately.\nDropIndex Example The following structure \u0026lsquo;Depot\u0026rsquo; has been used to create table \u0026ldquo;depot\u0026rdquo; in the target database. We will subsequently use the PublicDB.CreateIndex() method to create a new non-unique index on table columns \u0026ldquo;region\u0026rdquo; and \u0026ldquo;county\u0026rdquo;:\npackage main import ( \u0026#34;log\u0026#34; \u0026#34;github.com/1414C/sqac\u0026#34; _ \u0026#34;github.com/SAP/go-hdb/driver\u0026#34; _ \u0026#34;github.com/denisenkom/go-mssqldb\u0026#34; _ \u0026#34;github.com/go-sql-driver/mysql\u0026#34; _ \u0026#34;github.com/lib/pq\u0026#34; _ \u0026#34;github.com/mattn/go-sqlite3\u0026#34; ) func main() { var ( Handle sqac.PublicDB ) // table depot declaration with index idx_depot_region_county declaration  type Depot struct { DepotNum int `db:\u0026#34;depot_num\u0026#34; sqac:\u0026#34;primary_key:inc\u0026#34;` CreateDate time.Time `db:\u0026#34;create_date\u0026#34; sqac:\u0026#34;nullable:false;default:now();\u0026#34;` Country string `db:\u0026#34;country\u0026#34; sqac:\u0026#34;nullable:false;default:CA\u0026#34;` Province string `db:\u0026#34;province\u0026#34; sqac:\u0026#34;nullable:false;default:AB\u0026#34;` Region string `db:\u0026#34;region\u0026#34; sqac:\u0026#34;nullable:false;default:YYC;index:idx_depot_region_county\u0026#34;` County string `db:\u0026#34;county\u0026#34; sqac:\u0026#34;nullable:false;index:idx_depot_region_county\u0026#34;` Population int `db:\u0026#34;population\u0026#34; sqac:\u0026#34;nullable:false;default:0;index:non-unique\u0026#34;` } // Create a PublicDB instance to connect to the test sqlite db  Handle = sqac.Create(\u0026#34;sqlite\u0026#34;, false, false, \u0026#34;testdb.sqlite\u0026#34;) defer Handle.Close() // Ensure table \u0026#34;depot\u0026#34; exists in the database  err := Handle.DestructiveResetTables(Depot{}) if err != nil { log.Fatalf(\u0026#34;%s\u0026#34;, err.Error()) } // Determine the table name in the database  tn := sqac.GetTableName(Depot{}) // \u0026#34;depot\u0026#34;  if tn == \u0026#34;\u0026#34; { log.Fatalf(\u0026#34;Unable to determine table name for struct %v\u0026#34;, Depot{}) } // Drop index \u0026#34;idx_depot_region_county\u0026#34; on table \u0026#34;depot\u0026#34;  err = Handle.DropIndex(tn, \u0026#34;idx_depot_region_county\u0026#34;) if err != nil { log.Errorf(\u0026#34;%s\u0026#34;, err.Error()) } Handle.Close() } "
},
{
	"uri": "https://1414c.github.io/sqac/public-db/i-pdb-exists-index/",
	"title": "ExistsIndex",
	"tags": [],
	"description": "",
	"content": "ExistsIndex checks for the existence of named index \u0026ldquo;in\u0026rdquo; on database table \u0026ldquo;tn\u0026rdquo;. The method returns true if the specified index exists and false if it does not.\nThis method is used internally in PublicDB.DropIndex and does not need to be called prior to dropping a database index.\nExistsIndex Example The following structure \u0026lsquo;Depot\u0026rsquo; has been used to create table \u0026ldquo;depot\u0026rdquo; in the target database with index \u0026ldquo;idx_depot_region_county\u0026rdquo;. We will check for the existence of \u0026ldquo;idx_depot_region_county\u0026rdquo; expecting a true result, then check for the existence of index \u0026ldquo;idx_depot_province_region\u0026rdquo; expecting a false result.\npackage main import ( \u0026#34;log\u0026#34; \u0026#34;github.com/1414C/sqac\u0026#34; _ \u0026#34;github.com/SAP/go-hdb/driver\u0026#34; _ \u0026#34;github.com/denisenkom/go-mssqldb\u0026#34; _ \u0026#34;github.com/go-sql-driver/mysql\u0026#34; _ \u0026#34;github.com/lib/pq\u0026#34; _ \u0026#34;github.com/mattn/go-sqlite3\u0026#34; ) func main() { var ( Handle sqac.PublicDB ) // table depot declaration with index idx_depot_region_county declaration  type Depot struct { DepotNum int `db:\u0026#34;depot_num\u0026#34; sqac:\u0026#34;primary_key:inc\u0026#34;` CreateDate time.Time `db:\u0026#34;create_date\u0026#34; sqac:\u0026#34;nullable:false;default:now();\u0026#34;` Country string `db:\u0026#34;country\u0026#34; sqac:\u0026#34;nullable:false;default:CA\u0026#34;` Province string `db:\u0026#34;province\u0026#34; sqac:\u0026#34;nullable:false;default:AB\u0026#34;` Region string `db:\u0026#34;region\u0026#34; sqac:\u0026#34;nullable:false;default:YYC;index:idx_depot_region_county\u0026#34;` County string `db:\u0026#34;county\u0026#34; sqac:\u0026#34;nullable:false;index:idx_depot_region_county\u0026#34;` Population int `db:\u0026#34;population\u0026#34; sqac:\u0026#34;nullable:false;default:0;index:non-unique\u0026#34;` } // Create a PublicDB instance to connect to the test sqlite db  Handle = sqac.Create(\u0026#34;sqlite\u0026#34;, false, false, \u0026#34;testdb.sqlite\u0026#34;) defer Handle.Close() // Ensure table \u0026#34;depot\u0026#34; exists in the database  err := Handle.DestructiveResetTables(Depot{}) if err != nil { log.Fatalf(\u0026#34;%s\u0026#34;, err.Error()) } // Determine the table name in the database  tn := sqac.GetTableName(Depot{}) // \u0026#34;depot\u0026#34;  if tn == \u0026#34;\u0026#34; { log.Fatalf(\u0026#34;Unable to determine table name for struct %v\u0026#34;, Depot{}) } // Check for index \u0026#34;idx_depot_region_county\u0026#34; on table \u0026#34;depot\u0026#34;  ok = Handle.ExistsIndex(tn, \u0026#34;idx_depot_region_county\u0026#34;) if ok { log.Printf(\u0026#34;Index idx_depot_region_county exists in the db\u0026#34;) } else { log.Errorf(\u0026#34;expected idx_depot_region_county to exist in the db\u0026#34;) } // Check for non-existent index \u0026#34;idx_depot_province_region\u0026#34; on table \u0026#34;depot\u0026#34;  ok = Handle.ExistsIndex(tn, \u0026#34;idx_depot_province_region\u0026#34;) if ok { log.Errorf(\u0026#34;did not expect index idx_depot_province_region to exist in the db\u0026#34;) } else { log.Printf(\u0026#34;Correctly determined that idx_depot_province_region does not exist in the db\u0026#34;) } Handle.Close() } "
},
{
	"uri": "https://1414c.github.io/sqac/public-db/j-pdb-create/",
	"title": "Create",
	"tags": [],
	"description": "",
	"content": "The Create method is part of sqac's CRUD API and is used to insert a single-row of the specified entity into it's related database table. Structs annotated with \u0026lsquo;sqac:\u0026rsquo; tags are colloquially known as sqac entities, hence the parameter name \u0026lsquo;ent\u0026rsquo;.\nThe ent parameter must be a pointer to a populated go struct of the sqac table declaration. If an error is encountered, it will be returned to the caller.\nNotice that the inserted record is returned to the caller via the pointer reference following the insertion. The caller receives the new record in its entirety including auto-incrementing and defaulted column values.\nCRUD Create Example The following example illustrates the insertion of a new record (entity) into database table \u0026ldquo;depot\u0026rdquo;.\npackage main import ( \u0026#34;log\u0026#34; \u0026#34;github.com/1414C/sqac\u0026#34; _ \u0026#34;github.com/mattn/go-sqlite3\u0026#34; ) func main() { var ( Handle sqac.PublicDB ) // Declare a struct to be used as the source for table creation  type Depot struct { DepotNum int `db:\u0026#34;depot_num\u0026#34; sqac:\u0026#34;primary_key:inc\u0026#34;` CreateDate time.Time `db:\u0026#34;create_date\u0026#34; sqac:\u0026#34;nullable:false;default:now();\u0026#34;` Country string `db:\u0026#34;country\u0026#34; sqac:\u0026#34;nullable:false;default:CA\u0026#34;` Province string `db:\u0026#34;province\u0026#34; sqac:\u0026#34;nullable:false;default:AB\u0026#34;` Region string `db:\u0026#34;region\u0026#34; sqac:\u0026#34;nullable:false;default:YYC\u0026#34;` Population int `db:\u0026#34;population\u0026#34; sqac:\u0026#34;nullable:false;default:0;index:non-unique\u0026#34;` } // Create a PublicDB instance to connect to the test sqlite db  Handle = sqac.Create(\u0026#34;sqlite\u0026#34;, false, false, \u0026#34;testdb.sqlite\u0026#34;) // Create a new table in the database  err := Handle.DestructiveResetTables(Depot{}) if err != nil { log.Errorf(\u0026#34;%s\u0026#34;, err.Error()) } // Insert a new record into table \u0026#34;depot\u0026#34;  var newRecord = Depot{ Country: \u0026#34;CA\u0026#34;, Province: \u0026#34;BC\u0026#34;, Region: \u0026#34;YVR\u0026#34;, Population: 2500000, } err = Handle.Create(\u0026amp;newRecord) if err != nil { log.Errorf(err.Error()) } else { log.Println(\u0026#34;New record: \u0026#34;, newRecord) } // Close the connection  Handle.Close() } "
},
{
	"uri": "https://1414c.github.io/sqac/public-db/k-pdb-update/",
	"title": "Update",
	"tags": [],
	"description": "",
	"content": "The Update method is part of sqac's CRUD API and is used to update an existing row of the specified entity into it's related database table. Structs annotated with \u0026lsquo;sqac:\u0026rsquo; tags are colloquially known as sqac entities, hence the parameter name \u0026lsquo;ent\u0026rsquo;.\nThe ent parameter must be a pointer to a populated go struct of the sqac table declaration. If the table contains a primary-key in the database, the key column(s) may not be updated, but must be included. If an error is encountered, it will be returned to the caller.\nCRUD Update Example The following example illustrates the update of an existing record (entity) in database table \u0026ldquo;depot\u0026rdquo;.\npackage main import ( \u0026#34;log\u0026#34; \u0026#34;github.com/1414C/sqac\u0026#34; _ \u0026#34;github.com/mattn/go-sqlite3\u0026#34; ) func main() { var ( Handle sqac.PublicDB ) // Declare a struct to be used as the source for table creation  type Depot struct { DepotNum int `db:\u0026#34;depot_num\u0026#34; sqac:\u0026#34;primary_key:inc\u0026#34;` CreateDate time.Time `db:\u0026#34;create_date\u0026#34; sqac:\u0026#34;nullable:false;default:now();\u0026#34;` Country string `db:\u0026#34;country\u0026#34; sqac:\u0026#34;nullable:false;default:CA\u0026#34;` Province string `db:\u0026#34;province\u0026#34; sqac:\u0026#34;nullable:false;default:AB\u0026#34;` Region string `db:\u0026#34;region\u0026#34; sqac:\u0026#34;nullable:false;default:YYC\u0026#34;` Population int `db:\u0026#34;population\u0026#34; sqac:\u0026#34;nullable:false;default:0;index:non-unique\u0026#34;` } // Create a PublicDB instance to connect to the test sqlite db  Handle = sqac.Create(\u0026#34;sqlite\u0026#34;, false, false, \u0026#34;testdb.sqlite\u0026#34;) // Create a new table in the database  err := Handle.DestructiveResetTables(Depot{}) if err != nil { log.Errorf(\u0026#34;%s\u0026#34;, err.Error()) } // Insert a new record into table \u0026#34;depot\u0026#34;  var depotRecord = Depot{ Country: \u0026#34;CA\u0026#34;, Province: \u0026#34;BC\u0026#34;, Region: \u0026#34;YVR\u0026#34;, Population: 2500000, } err = Handle.Create(\u0026amp;depotRecord) if err != nil { log.Errorf(err.Error()) } else { log.Println(\u0026#34;New record: \u0026#34;, depotRecord) } // Update the existing record using the fully populated depotRecord  // struct as a starting point.  depotRecord.Province = \u0026#34;ON\u0026#34; depotRecord.Region = \u0026#34;YYZ\u0026#34; depotRecord.Population = 4500000 err = Handle.Update(\u0026amp;depotRecord) if err != nil { log.Errorf(err.Error()) } else { log.Println(\u0026#34;Updated record: \u0026#34;, depotRecord) } // Close the connection  Handle.Close() } "
},
{
	"uri": "https://1414c.github.io/sqac/public-db/l-pdb-delete/",
	"title": "Delete",
	"tags": [],
	"description": "",
	"content": "The Delete method is part of sqac's CRUD API and is used to Delete an existing row of the specified entity from it's related database table. Structs annotated with \u0026lsquo;sqac:\u0026rsquo; tags are colloquially known as sqac entities, hence the parameter name \u0026lsquo;ent\u0026rsquo;.\nThe ent parameter must be a pointer to a populated go struct of the sqac table declaration. If the table contains a primary-key in the database, the key column(s) should be completely populated. If an error is encountered, it will be returned to the caller.\nCRUD Delete Example The following example illustrates the deletion of an existing record (entity) from database table \u0026ldquo;depot\u0026rdquo;.\npackage main import ( \u0026#34;log\u0026#34; \u0026#34;github.com/1414C/sqac\u0026#34; _ \u0026#34;github.com/mattn/go-sqlite3\u0026#34; ) func main() { var ( Handle sqac.PublicDB ) // Declare a struct to be used as the source for table creation  type Depot struct { DepotNum int `db:\u0026#34;depot_num\u0026#34; sqac:\u0026#34;primary_key:inc\u0026#34;` CreateDate time.Time `db:\u0026#34;create_date\u0026#34; sqac:\u0026#34;nullable:false;default:now();\u0026#34;` Country string `db:\u0026#34;country\u0026#34; sqac:\u0026#34;nullable:false;default:CA\u0026#34;` Province string `db:\u0026#34;province\u0026#34; sqac:\u0026#34;nullable:false;default:AB\u0026#34;` Region string `db:\u0026#34;region\u0026#34; sqac:\u0026#34;nullable:false;default:YYC\u0026#34;` Population int `db:\u0026#34;population\u0026#34; sqac:\u0026#34;nullable:false;default:0;index:non-unique\u0026#34;` } // Create a PublicDB instance to connect to the test sqlite db  Handle = sqac.Create(\u0026#34;sqlite\u0026#34;, false, false, \u0026#34;testdb.sqlite\u0026#34;) // Create a new table in the database  err := Handle.DestructiveResetTables(Depot{}) if err != nil { log.Errorf(\u0026#34;%s\u0026#34;, err.Error()) } // Insert a new record into table \u0026#34;depot\u0026#34;  var depotRecord = Depot{ Country: \u0026#34;CA\u0026#34;, Province: \u0026#34;BC\u0026#34;, Region: \u0026#34;YVR\u0026#34;, Population: 2500000, } err = Handle.Create(\u0026amp;depotRecord) if err != nil { log.Errorf(err.Error()) } else { log.Println(\u0026#34;New record: \u0026#34;, depotRecord) } // Delete the existing record using the fully populated depotRecord  err = Handle.Delete(\u0026amp;depotRecord) if err != nil { log.Errorf(err.Error()) } // Close the connection  Handle.Close() } "
},
{
	"uri": "https://1414c.github.io/sqac/public-db/m-pdb-get-entity/",
	"title": "GetEntity",
	"tags": [],
	"description": "",
	"content": "The GetEntity method is part of sqac's CRUD API and is used to retrieve an existing row of the specified entity from it's related database table. Structs annotated with \u0026lsquo;sqac:\u0026rsquo; tags are colloquially known as sqac entities, hence the parameter name \u0026lsquo;ent\u0026rsquo;.\nThe ent parameter must be a pointer to a go struct of the sqac table declaration in which the primary-key fields have been populated. The GetEntity method can be thought of as a fully-keyed SELECT SINGLE statement. If an error is encountered, it will be returned to the caller.\nPublicDB.GetEntitiesCP is a more flexible and useful method.\nCRUD GetEntity Example The following example illustrates the deletion of an existing record (entity) from database table \u0026ldquo;depot\u0026rdquo;.\npackage main import ( \u0026#34;log\u0026#34; \u0026#34;github.com/1414C/sqac\u0026#34; _ \u0026#34;github.com/mattn/go-sqlite3\u0026#34; ) func main() { var ( Handle sqac.PublicDB ) // Declare a struct to be used as the source for table creation  type Depot struct { DepotNum int `db:\u0026#34;depot_num\u0026#34; sqac:\u0026#34;primary_key:inc\u0026#34;` CreateDate time.Time `db:\u0026#34;create_date\u0026#34; sqac:\u0026#34;nullable:false;default:now();\u0026#34;` Country string `db:\u0026#34;country\u0026#34; sqac:\u0026#34;nullable:false;default:CA\u0026#34;` Province string `db:\u0026#34;province\u0026#34; sqac:\u0026#34;nullable:false;default:AB\u0026#34;` Region string `db:\u0026#34;region\u0026#34; sqac:\u0026#34;nullable:false;default:YYC\u0026#34;` Population int `db:\u0026#34;population\u0026#34; sqac:\u0026#34;nullable:false;default:0;index:non-unique\u0026#34;` } // Create a PublicDB instance to connect to the test sqlite db  Handle = sqac.Create(\u0026#34;sqlite\u0026#34;, false, false, \u0026#34;testdb.sqlite\u0026#34;) // Create a new table in the database  err := Handle.DestructiveResetTables(Depot{}) if err != nil { log.Errorf(\u0026#34;%s\u0026#34;, err.Error()) } // Insert a new record into table \u0026#34;depot\u0026#34;  var depotRecord = Depot{ Country: \u0026#34;CA\u0026#34;, Province: \u0026#34;BC\u0026#34;, Region: \u0026#34;YVR\u0026#34;, Population: 2500000, } err = Handle.Create(\u0026amp;depotRecord) if err != nil { log.Errorf(err.Error()) } else { log.Println(\u0026#34;New record: \u0026#34;, depotRecord) } // Retrieve the existing record using the fully populated depotRecord\u0026#39;s primary-key value  var readRecord = Depot{ DepotNum: depotRecord.DepotNum, } err = Handle.GetEntity(\u0026amp;readRecord) if err != nil { log.Errorf(err.Error()) } else { log.Println(\u0026#34;Retrieved record: \u0026#34;,readRecord) } // Close the connection  Handle.Close() } "
},
{
	"uri": "https://1414c.github.io/sqac/public-db/n-pdb-get-entities-with-commands-ip/",
	"title": "GetEntitiesCP",
	"tags": [],
	"description": "",
	"content": "The GetEntitiesCP method is part of sqac's CRUD API and is used to retrieve existing rows of the specified entity from their related database table. Structs annotated with \u0026lsquo;sqac:\u0026rsquo; tags are colloquially known as sqac entities, hence the parameter name \u0026lsquo;ents\u0026rsquo;.\nThe ents parameter must be a pointer to a slice declared using the go struct-type corresponding to the targeted database table. This method can be thought of as a flexible retrieval mechanism for one or more database records. Complex selections can be constructed through the use of the params and cmdMap parameters.\nThe call returns the slice pointer as well as the number of retrieved records and the standard go error type.\nParameters    Parameter Description     ents interface{} An empty slice declared to be of the go struct-type corresponding to the targeted database table. For example: depotRead := []Depot{} n, err := Handle.GetEntitiesCP(\u0026amp;depotRead, p, cm) A pointer to the depotRead slice should be passed into the method in the ents parameter. The method will populate the slice based on the records retrieved from the database thereby making the selected records available to the caller on completion of the method.   pList []GetParam A slice containing a list of parameters for use as SELECT criteria when retrieving the requested records from the database. Each record in the sqac.GetParam slice must contain a column-name from the target table, an operator and a value. See the example program below.   cmdMap map[string]interface{} The cmdMap parameter is used to provide additional instructions for use in the query. Supported commands include: count, orderby, asc, desc, limit and offset. Examples of the commands are shown in the subsequent sections.    CRUD GetEntitiesCP Simple Example The following example illustrates reading all records from table \u0026ldquo;depot\u0026rdquo;:\n// create a slice to hold records read from table \u0026#34;depot\u0026#34; depotRecs:= []Depot{} // call with no parameters and no commands _, err := Handle.GetEntitiesCP(\u0026amp;depotRecs, nil, nil) CRUD GetEntitiesCP pList Example // create a slice to hold records read from table \u0026#34;depot\u0026#34; depotRecs:= []Depot{} // setup selection parameters p := sqac.GetParam{ FieldName: \u0026#34;region\u0026#34;, Operand: \u0026#34;=\u0026#34;, ParamValue: \u0026#34;ON\u0026#34;, NextOperator: \u0026#34;AND\u0026#34; } pa := []sqac.GetParam{} pa = append(pa, p) p.FieldName = \u0026#34;population\u0026#34; p.Operand = \u0026#34;\u0026gt;\u0026#34; p.ParamValue = 1000000 p.NextOperator = \u0026#34;\u0026#34; pa = append(pa, p) // call with parameters and no commands _, err := Handle.GetEntitiesCP(\u0026amp;depotRecs, pa, nil) CRUD GetEntitiesCP pList and cmdMap Example // create a slice to hold records read from table \u0026#34;depot\u0026#34; depotRecs:= []Depot{} // setup selection parameters p := sqac.GetParam{ FieldName: \u0026#34;region\u0026#34;, Operand: \u0026#34;=\u0026#34;, ParamValue: \u0026#34;AB\u0026#34;, NextOperator: \u0026#34;AND\u0026#34; } pa := []sqac.GetParam{} pa = append(pa, p) p.FieldName = \u0026#34;population\u0026#34; p.Operand = \u0026#34;\u0026gt;\u0026#34; p.ParamValue = 50000 p.NextOperator = \u0026#34;\u0026#34; pa = append(pa, p) // create cmdMap - non-sensical, but shows what can be done // set $orderby=name$descending$limit=3$offset=2 cm := make(map[string]interface{}) cm[\u0026#34;orderby\u0026#34;] = \u0026#34;population\u0026#34; cm[\u0026#34;asc\u0026#34;] = nil // no value required cm[\u0026#34;limit\u0026#34;] = 3 cm[\u0026#34;offset\u0026#34;] = 2 // call with parameters and command map _, err := Handle.GetEntitiesCP(\u0026amp;depotRecs, pa, cm) "
},
{
	"uri": "https://1414c.github.io/sqac/public-db/o-pdb-create-foreign-key/",
	"title": "CreateForeignKey",
	"tags": [],
	"description": "",
	"content": "The CreateForeignKey method facilitates the creation of a foreign-key on a table column in the database. A foreign-key constraint is created on the assigned column, thereby limiting its allowable values to those found in the table.column referenced in the foreign-key declaration.\nIn general, it is more desirable to declare foreign-keys in the model via the \u0026ldquo;fkey:\u0026rdquo; \u0026lsquo;sqac:\u0026rsquo; tag than to call this method directly.\nParameters    Parameter Description     i interface{} Accepts the go struct type of the table on which the foreign-key is being declared. For example:If table column product.warehouse_id is being assigned a foreign-key of table column warehouse.id, this parameter would expect to be provided with go type Product{}.   ft string The database table name of the table on which the foreign-key is being declared. For example:If table column product.warehouse_id is being assigned a foreign-key of table column warehouse.id, this parameter should be provided with \u0026ldquo;product\u0026rdquo;.   rt string The database table name of the table on which the foreign-key will refer to. For example:If table column product.warehouse_id is being assigned a foreign-key of table column warehouse.id, this parameter should be provided with \u0026ldquo;warehouse\u0026rdquo;.   ff string The database name of the column on which the foreign-key is being declared. For example:If table column product.warehouse_id is being assigned a foreign-key of table column warehouse.id, this parameter should be provided with \u0026ldquo;warehouse_id\u0026rdquo;.   rf string The database name of the column on which the foreign-key will refer to. For example:If table column product.warehouse_id is being assigned a foreign-key of table column warehouse.id, this parameter should be provided with \u0026ldquo;id\u0026rdquo;.    PublicDB.CreateForeignKey Example A sample call using the scenario described in the Parameters table follows:\ntype Warehouse struct { ID uint64 `db:\u0026#34;id\u0026#34; json:\u0026#34;id\u0026#34; sqac:\u0026#34;primary_key:inc;start:40000000\u0026#34;` City string `db:\u0026#34;city\u0026#34; json:\u0026#34;city\u0026#34; sqac:\u0026#34;nullable:false;default:Calgary\u0026#34;` Quadrant string `db:\u0026#34;quadrant\u0026#34; json:\u0026#34;quadrant\u0026#34; sqac:\u0026#34;nullable:false;default:SE\u0026#34;` } type Product struct { ID uint64 `db:\u0026#34;id\u0026#34; json:\u0026#34;id\u0026#34; sqac:\u0026#34;primary_key:inc;start:95000000\u0026#34;` ProductName string `db:\u0026#34;product_name\u0026#34; json:\u0026#34;product_name\u0026#34; sqac:\u0026#34;nullable:false;default:unknown\u0026#34;` ProductCode string `db:\u0026#34;product_code\u0026#34; json:\u0026#34;product_code\u0026#34; sqac:\u0026#34;nullable:false;default:0000-0000-00\u0026#34;` UOM string `db:\u0026#34;uom\u0026#34; json:\u0026#34;uom\u0026#34; sqac:\u0026#34;nullable:false;default:EA\u0026#34;` WarehouseID uint64 `db:\u0026#34;warehouse_id\u0026#34; json:\u0026#34;warehouse_id\u0026#34; sqac:\u0026#34;nullable:false\u0026#34;` } err := Handle.CreateForeignKey(Product{}, \u0026#34;product\u0026#34;, \u0026#34;warehouse\u0026#34;, \u0026#34;warehouse_id\u0026#34;, \u0026#34;id\u0026#34;) ... ... "
},
{
	"uri": "https://1414c.github.io/sqac/public-db/p-pdb-drop-foreign-key/",
	"title": "DropForeignKey",
	"tags": [],
	"description": "",
	"content": "The DropForeignKey method facilitates the dropping of an existing foreign-key constraint in the database.\nParameters    Parameter Description     i interface{} Accepts the go struct type of the table from which the foreign-key is being dropped. For example:If table column product.warehouse_id had a foreign-key constraint against table column warehouse.id, this parameter should be provided with go type Product{}.   ft string The database table name of the table on which the foreign-key is being dropped. For example:If table column product.warehouse_id had a foreign-key constraint against table column warehouse.id, this parameter should be provided with \u0026ldquo;product\u0026rdquo;.   fkn string The name of the foreign-key being dropped. For example:If table column product.warehouse_id has a foreign-key constraint against table.column warehouse.id, by convention this parameter should contain: \u0026ldquo;fk_product_warehouse_id\u0026rdquo;.       Sqac foreign-key naming convention can be found in the \u0026ldquo;fkey:\u0026rdquo; \u0026lsquo;sqac:\u0026rsquo; tag documentation.     PublicDB.DropForeignKey Example A sample call using the scenario described in the Parameters table follows:\n... // drop the foreign-key err := Handle.DropForeignKey(Product{}, pn, \u0026#34;fk_product_warehouse_id\u0026#34;) ... ... DB Specific Notes    Database Notes     Sqlite3 SQLite does not permit ADD/DROP's of foreign-key constraints on an existing table. As a result, sqac will simulate the dropping of a foreign-key constraint by executing the following steps: 1. Copying the existing table and it's content to a temp DB table. 2. Dropping the existing table. 3. Recreating the table based on the \u0026ldquo;sqac:\u0026rdquo; tags declared in the go struct type contained in parameter i interface{}. 4. Loading the backed up table data from the temp table into the new table. 5. Dropping the temp table. This is not a fool-proof way of dealing with the situation, as the table in question may not have current or correct \u0026ldquo;sqac:\u0026rdquo; tags. Exercise caution using DropForeignKey with Sqlite3.    "
},
{
	"uri": "https://1414c.github.io/sqac/public-db/q-pdb-exists-foreign-key-by-name/",
	"title": "ExistsForeignKeyByName",
	"tags": [],
	"description": "",
	"content": "PublicDB.ExistsForeignKeyByName(i interface The ExistsForeignKeyByName method checks for the existence of the specified foreign-key constraint in the database.\nThe following go structs contain \u0026lsquo;sqac:\u0026rsquo; tags declaring a foreign-key constraint between table column product.warehouse_id and table column warehouse.id. The resulting foreign-key constraint on table column product.warehouse_id would be named \u0026ldquo;fk_product_warehouse_id\u0026rdquo; based on the sqac foreign-key naming standard.\ntype Warehouse struct { ID uint64 `db:\u0026#34;id\u0026#34; json:\u0026#34;id\u0026#34; sqac:\u0026#34;primary_key:inc;start:40000000\u0026#34;` City string `db:\u0026#34;city\u0026#34; json:\u0026#34;city\u0026#34; sqac:\u0026#34;nullable:false;default:Calgary\u0026#34;` Quadrant string `db:\u0026#34;quadrant\u0026#34; json:\u0026#34;quadrant\u0026#34; sqac:\u0026#34;nullable:false;default:SE\u0026#34;` } type Product struct { ID uint64 `db:\u0026#34;id\u0026#34; json:\u0026#34;id\u0026#34; sqac:\u0026#34;primary_key:inc;start:95000000\u0026#34;` ProductName string `db:\u0026#34;product_name\u0026#34; json:\u0026#34;product_name\u0026#34; sqac:\u0026#34;nullable:false;default:unknown\u0026#34;` ProductCode string `db:\u0026#34;product_code\u0026#34; json:\u0026#34;product_code\u0026#34; sqac:\u0026#34;nullable:false;default:0000-0000-00\u0026#34;` UOM string `db:\u0026#34;uom\u0026#34; json:\u0026#34;uom\u0026#34; sqac:\u0026#34;nullable:false;default:EA\u0026#34;` // foreign-key declared against table \u0026#34;warehouse\u0026#34;, column \u0026#34;id\u0026#34;  WarehouseID uint64 `db:\u0026#34;warehouse_id\u0026#34; json:\u0026#34;warehouse_id\u0026#34; sqac:\u0026#34;nullable:false;fkey:warehouse(id)\u0026#34;` } Parameters    Parameter Description     i interface{} Accepts the go struct type of the table from which the foreign-key is thought to be declared. For example:If table column product.warehouse_id had a foreign-key constraint against table column warehouse.id, this parameter should be provided with go type Product{}.   fkn string The name of the foreign-key being checked. For example:If table column product.warehouse_id has a foreign-key constraint against table.column warehouse.id, by convention this parameter should contain: \u0026ldquo;fk_product_warehouse_id\u0026rdquo;.    PublicDB.ExistsForeignKeyByName Example A sample call using the scenario described in the Parameters table follows:\ntype Warehouse struct { ID uint64 `db:\u0026#34;id\u0026#34; json:\u0026#34;id\u0026#34; sqac:\u0026#34;primary_key:inc;start:40000000\u0026#34;` City string `db:\u0026#34;city\u0026#34; json:\u0026#34;city\u0026#34; sqac:\u0026#34;nullable:false;default:Calgary\u0026#34;` Quadrant string `db:\u0026#34;quadrant\u0026#34; json:\u0026#34;quadrant\u0026#34; sqac:\u0026#34;nullable:false;default:SE\u0026#34;` } type Product struct { ID uint64 `db:\u0026#34;id\u0026#34; json:\u0026#34;id\u0026#34; sqac:\u0026#34;primary_key:inc;start:95000000\u0026#34;` ProductName string `db:\u0026#34;product_name\u0026#34; json:\u0026#34;product_name\u0026#34; sqac:\u0026#34;nullable:false;default:unknown\u0026#34;` ProductCode string `db:\u0026#34;product_code\u0026#34; json:\u0026#34;product_code\u0026#34; sqac:\u0026#34;nullable:false;default:0000-0000-00\u0026#34;` UOM string `db:\u0026#34;uom\u0026#34; json:\u0026#34;uom\u0026#34; sqac:\u0026#34;nullable:false;default:EA\u0026#34;` // foreign-key declared against table \u0026#34;warehouse\u0026#34;, column \u0026#34;id\u0026#34;  WarehouseID uint64 `db:\u0026#34;warehouse_id\u0026#34; json:\u0026#34;warehouse_id\u0026#34; sqac:\u0026#34;nullable:false;fkey:warehouse(id)\u0026#34;` } ... ... // determine the standard foreign-key name (expect \u0026#34;fk_product_warehouse_id\u0026#34;) fkn, err = common.GetFKeyName(Product{}, \u0026#34;product\u0026#34;, \u0026#34;warehouse\u0026#34;, \u0026#34;warehouse_id\u0026#34;, \u0026#34;id\u0026#34;) ... ... // check that the foreign-key exists by name fkExists, err := Handle.ExistsForeignKeyByName(Product{}, fkn) ... ... "
},
{
	"uri": "https://1414c.github.io/sqac/public-db/r-pdb-exists-foreign-key-by-fields/",
	"title": "ExistsForeignKeyByFields",
	"tags": [],
	"description": "",
	"content": "PublicDB.ExistsForeignKeyByFields(i interface The ExistsForeignKeyByName method checks for the existence of the specified foreign-key constraint in the database.\nThe following go structs contain \u0026lsquo;sqac:\u0026rsquo; tags declaring a foreign-key constraint between table column product.warehouse_id and table column warehouse.id. The resulting foreign-key constraint on table column product.warehouse_id would be named \u0026ldquo;fk_product_warehouse_id\u0026rdquo; based on the sqac foreign-key naming standard.\ntype Warehouse struct { ID uint64 `db:\u0026#34;id\u0026#34; json:\u0026#34;id\u0026#34; sqac:\u0026#34;primary_key:inc;start:40000000\u0026#34;` City string `db:\u0026#34;city\u0026#34; json:\u0026#34;city\u0026#34; sqac:\u0026#34;nullable:false;default:Calgary\u0026#34;` Quadrant string `db:\u0026#34;quadrant\u0026#34; json:\u0026#34;quadrant\u0026#34; sqac:\u0026#34;nullable:false;default:SE\u0026#34;` } type Product struct { ID uint64 `db:\u0026#34;id\u0026#34; json:\u0026#34;id\u0026#34; sqac:\u0026#34;primary_key:inc;start:95000000\u0026#34;` ProductName string `db:\u0026#34;product_name\u0026#34; json:\u0026#34;product_name\u0026#34; sqac:\u0026#34;nullable:false;default:unknown\u0026#34;` ProductCode string `db:\u0026#34;product_code\u0026#34; json:\u0026#34;product_code\u0026#34; sqac:\u0026#34;nullable:false;default:0000-0000-00\u0026#34;` UOM string `db:\u0026#34;uom\u0026#34; json:\u0026#34;uom\u0026#34; sqac:\u0026#34;nullable:false;default:EA\u0026#34;` // foreign-key declared against table \u0026#34;warehouse\u0026#34;, column \u0026#34;id\u0026#34;  WarehouseID uint64 `db:\u0026#34;warehouse_id\u0026#34; json:\u0026#34;warehouse_id\u0026#34; sqac:\u0026#34;nullable:false;fkey:warehouse(id)\u0026#34;` } Parameters    Parameter Description     i interface{} Accepts the go struct type of the table on which the foreign-key is thought to be declared. For example:If table column product.warehouse_id had a foreign-key constraint against table column warehouse.id, this parameter should be provided with go type Product{}.   ft string The database table name of the table on which the foreign-key is thought to be declared. For example:If table column product.warehouse_id is thought to have been assigned a foreign-key of table column warehouse.id, this parameter should be provided with \u0026ldquo;product\u0026rdquo;.   rt string The database table name of the table on which the foreign-key is thought to refer to. For example:If table column product.warehouse_id is thought to have been assigned a foreign-key of table column warehouse.id, this parameter should be provided with \u0026ldquo;warehouse\u0026rdquo;.   ff string The database name of the column on which the foreign-key is thought to have been declared. For example:If table column product.warehouse_id is thought to have been assigned a foreign-key of table column warehouse.id, this parameter should be provided with \u0026ldquo;warehouse_id\u0026rdquo;.   rf string The database name of the column on which the foreign-key is thought to refer to. For example:If table column product.warehouse_id is thought to have been assigned a foreign-key of table column warehouse.id, this parameter should be provided with \u0026ldquo;id\u0026rdquo;.    PublicDB.ExistsForeignKeyByFields Example A sample call using the scenario described in the Parameters table follows:\ntype Warehouse struct { ID uint64 `db:\u0026#34;id\u0026#34; json:\u0026#34;id\u0026#34; sqac:\u0026#34;primary_key:inc;start:40000000\u0026#34;` City string `db:\u0026#34;city\u0026#34; json:\u0026#34;city\u0026#34; sqac:\u0026#34;nullable:false;default:Calgary\u0026#34;` Quadrant string `db:\u0026#34;quadrant\u0026#34; json:\u0026#34;quadrant\u0026#34; sqac:\u0026#34;nullable:false;default:SE\u0026#34;` } type Product struct { ID uint64 `db:\u0026#34;id\u0026#34; json:\u0026#34;id\u0026#34; sqac:\u0026#34;primary_key:inc;start:95000000\u0026#34;` ProductName string `db:\u0026#34;product_name\u0026#34; json:\u0026#34;product_name\u0026#34; sqac:\u0026#34;nullable:false;default:unknown\u0026#34;` ProductCode string `db:\u0026#34;product_code\u0026#34; json:\u0026#34;product_code\u0026#34; sqac:\u0026#34;nullable:false;default:0000-0000-00\u0026#34;` UOM string `db:\u0026#34;uom\u0026#34; json:\u0026#34;uom\u0026#34; sqac:\u0026#34;nullable:false;default:EA\u0026#34;` // foreign-key declared against table \u0026#34;warehouse\u0026#34;, column \u0026#34;id\u0026#34;  WarehouseID uint64 `db:\u0026#34;warehouse_id\u0026#34; json:\u0026#34;warehouse_id\u0026#34; sqac:\u0026#34;nullable:false;fkey:warehouse(id)\u0026#34;` } ... ... // check that the foreign-key exists by fields fkExists, err := Handle.ExistsForeignKeyByFields(Product{}, \u0026#34;product\u0026#34;, \u0026#34;warehouse\u0026#34;, \u0026#34;warehouse_id\u0026#34;, \u0026#34;id\u0026#34;) ... ... Notes In practice, this method is not very different from PublicDB.ExistsForeignKeyByName. It could be enhanced to use the actual string name of the foreign-key constraint as a parameter rather than using the sqac foreign-key name standard to assemble the name to be checked.\n"
},
{
	"uri": "https://1414c.github.io/sqac/public-db/z-pdb-data-types/",
	"title": "sqac Data Types",
	"tags": [],
	"description": "",
	"content": "sqac.IndexInfo IndexInfo is used by sqac to provide information to the PublicDB.CreateIndex method regarding the table name, uniqueness and columns to be included in a new database index.\n// IndexInfo contains index definitions as read from the sqac:\u0026#34;index\u0026#34; tags type IndexInfo struct { TableName string Unique bool IndexFields []string } sqac.GetParam GetParam defines a common structure for CRUD GET parameters and is used in the PublicDB.GetEntitiesCP method.\ntype GetParam struct { FieldName string // database column name  Operand string // operand for parameter (ie. ==, !=, \u0026lt; etc.)  ParamValue interface{} // parameter value  NextOperator string // deprecated - do not use } "
},
{
	"uri": "https://1414c.github.io/sqac/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "SQAC ORM Sqac is a thin ORM that was written to talk to the SAP Hana in-memory db and other commonly used DBMS systems. The ORM code is simple and can easily be extended to support any database for which a go driver exists.\nThere are a lot of go-based ORM solutions, so why write a new one?\nAt the time sqac was written, an ORM solution wasn't available for the SAP Hana database. I wanted to be able to write an application, test it against a locally installed DBMS like Postgres and then simply \u0026lsquo;re-aim\u0026rsquo; the application at SAP Hana without making changes. While it would have been possible to extend an existing ORM solution, I wanted to see what was involved in writing one of my own. Sqac is the result.\nFeatures  Uses go struct tags backed by a user-accessible API to declare database tables. Struct tags support the declaration of simple and compound indices, foreign-key relationships, primary-keys with starting point, default value, nullable etc. Supports PostgreSQL, MySQL, Sqlite3, MSSQL \u0026amp; SAP Hana. Easily extended to support other DB's via implementation of the PublicDB interface. API supports common DDL requirements (CREATE, DROP, ALTER etc. for table, indices, sequences etc.). API supports generic CRUD entity operations. Set/Get API commands support (/$count /$orderby=field_name $limit=n; $offset=n; ($asc|$desc)). Access to standard go sql and jmoiron's sqlx API's. A robust test suite is included to ensure correct operation.  "
},
{
	"uri": "https://1414c.github.io/sqac/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://1414c.github.io/sqac/credits/",
	"title": "Credits",
	"tags": [],
	"description": "",
	"content": "Contributors Thanks to them for making Open Source Software a better place !\nPackages and libraries  sqlx go-sql-driver/mysql lib/pq go-sqlite3 go-mssqldb go-hdb  Supported Databases  Small. Fast. Reliable. Choose any three.    The world\u0026#39;s most advanced open source database        SAP Hana   Tooling  Hugo Hugo Learn Theme  "
},
{
	"uri": "https://1414c.github.io/sqac/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]