<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Getting Started on Sqac ORM</title>
    <link>https://1414c.github.io/sqac/getting-started/</link>
    <description>Recent content in Getting Started on Sqac ORM</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 06 Dec 2018 16:20:03 -0700</lastBuildDate>
    
	<atom:link href="https://1414c.github.io/sqac/getting-started/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go Environment</title>
      <link>https://1414c.github.io/sqac/getting-started/gs-content-a/</link>
      <pubDate>Thu, 06 Dec 2018 16:20:03 -0700</pubDate>
      
      <guid>https://1414c.github.io/sqac/getting-started/gs-content-a/</guid>
      <description>If you already have Go installed and know that your installation is working, you should skip to the next section. If you need to get Go installed on your machine, keep reading.
Go is easy to setup and can be installed from source or binary package, both which are available at golang.org. Sqac is presently built and tested using golang version 1.10, but it is best to use the latest stable 1.</description>
    </item>
    
    <item>
      <title>Installing Sqac</title>
      <link>https://1414c.github.io/sqac/getting-started/gs-content-b/</link>
      <pubDate>Fri, 07 Dec 2018 09:20:02 -0700</pubDate>
      
      <guid>https://1414c.github.io/sqac/getting-started/gs-content-b/</guid>
      <description>The easiest way to install Sqac is to use go get on the command-line to pull the latest version from github, as shown below:
go get -u github.com/1414C/sqac  The &amp;lsquo;go get&amp;rsquo; command will pull the sqac github repository into your $GOPATH/src/github.com folder, as well as any dependencies referenced by the sqac source code. The -u flag is included to instruct go get to check for and pull updates to sqac and it&amp;rsquo;s dependencies.</description>
    </item>
    
    <item>
      <title>Using Sqac</title>
      <link>https://1414c.github.io/sqac/getting-started/gs-content-c/</link>
      <pubDate>Fri, 07 Dec 2018 09:21:02 -0700</pubDate>
      
      <guid>https://1414c.github.io/sqac/getting-started/gs-content-c/</guid>
      <description>The following example illustrates the general usage of the sqac library.
package main import ( &amp;quot;flag&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;github.com/1414C/sqac&amp;quot; _ &amp;quot;github.com/SAP/go-hdb/driver&amp;quot; _ &amp;quot;github.com/denisenkom/go-mssqldb&amp;quot; _ &amp;quot;github.com/go-sql-driver/mysql&amp;quot; _ &amp;quot;github.com/lib/pq&amp;quot; _ &amp;quot;github.com/mattn/go-sqlite3&amp;quot; ) func main() { dbFlag := flag.String(&amp;quot;db&amp;quot;, &amp;quot;sqlite&amp;quot;, &amp;quot;db-type for connection&amp;quot;) csFlag := flag.String(&amp;quot;cs&amp;quot;, &amp;quot;testdb.sqlite&amp;quot;, &amp;quot;connection-string for the database&amp;quot;) logFlag := flag.Bool(&amp;quot;l&amp;quot;, false, &amp;quot;activate sqac detail logging to stdout&amp;quot;) dbLogFlag := flag.Bool(&amp;quot;dbl&amp;quot;, false, &amp;quot;activate DDL/DML logging to stdout)&amp;quot;) flag.Parse() // This will be the central access-point to the ORM and should be made // available in all locations where access to the persistent storage // (database) is required.</description>
    </item>
    
    <item>
      <title>Database Connection Strings</title>
      <link>https://1414c.github.io/sqac/getting-started/gs-content-e/</link>
      <pubDate>Fri, 07 Dec 2018 17:02:02 -0700</pubDate>
      
      <guid>https://1414c.github.io/sqac/getting-started/gs-content-e/</guid>
      <description>Sqac requires a connection string in order to connect to the target database. Each of the supported databases has their own distinct connection string syntax.
sqac presently supports MSSQL, MySQL, PostgreSQL, Sqlite3 and the SAP Hana database. You will need to know the db user-name / password, as well as the address:port and name of the database. Sample connection strings are provided as a reference. MSSQL Connection String cs := &amp;quot;sqlserver://SA:my_passwd@localhost:1401?</description>
    </item>
    
  </channel>
</rss>